[
    [
        "dwi_file",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/iso_eddy_corrected_data_denoised.nii.gz",
            "f760a1e34a1b5d44d6772b3440900720"
        ]
    ],
    [
        "fbval",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/bval.bval",
            "b294dec84a44b9f1546859ba297d2a25"
        ]
    ],
    [
        "fbvec",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/std_dmri/bvecs.bvec",
            "ee89864bee552cd4db5e4abd8239fcf0"
        ]
    ],
    [
        "function_str",
        "def make_gtab_and_bmask(fbval, fbvec, dwi_file):\n    \"\"\"\n\n    :param fbval:\n    :param fbvec:\n    :param dwi_file:\n    :return:\n    \"\"\"\n    import os\n    from dipy.io import save_pickle\n    import os.path as op\n    from dipy.io import read_bvals_bvecs\n    from dipy.core.gradients import gradient_table\n    from nilearn.image import mean_img\n    from pynets.utils import rescale_bvec\n    # \"\"\"\n    # Takes bval and bvec files and produces a structure in dipy format\n    # **Positional Arguments:**\n    # \"\"\"\n    # Use b0's from the DWI to create a more stable DWI image for registration\n    outdir = op.dirname(dwi_file)\n\n    nodif_b0 = \"{}/nodif_b0.nii.gz\".format(outdir)\n    nodif_b0_bet = \"{}/nodif_b0_bet.nii.gz\".format(outdir)\n    nodif_b0_mask = \"{}/nodif_b0_bet_mask.nii.gz\".format(outdir)\n    bvec_rescaled = \"{}/bvec_scaled.bvec\".format(outdir)\n    gtab_file = \"{}/gtab.pkl\".format(outdir)\n\n    # loading bvecs/bvals\n    bvals, bvecs = read_bvals_bvecs(fbval, fbvec)\n    bvecs[np.where(np.any(abs(bvecs) >= 10, axis=1) == True)] = [1, 0, 0]\n    bvecs[np.where(bvals == 0)] = 0\n    if len(bvecs[np.where(np.logical_and(bvals > 50, np.all(abs(bvecs) == np.array([0, 0, 0]), axis=1)))]) > 0:\n        raise ValueError('WARNING: Encountered potentially corrupted bval/bvecs. Check to ensure volumes with a '\n                         'diffusion weighting are not being treated as B0\\'s along the bvecs')\n    np.savetxt(fbval, bvals)\n    np.savetxt(fbvec, bvecs)\n    bvec_rescaled = rescale_bvec(fbvec, bvec_rescaled)\n    if fbval and bvec_rescaled:\n        bvals, bvecs = read_bvals_bvecs(fbval, bvec_rescaled)\n    else:\n        raise ValueError('Either bvals or bvecs files not found (or rescaling failed)!')\n\n    # Creating the gradient table\n    gtab = gradient_table(bvals, bvecs)\n\n    # Correct b0 threshold\n    gtab.b0_threshold = min(bvals)\n\n    # Get b0 indices\n    b0s = np.where(gtab.bvals == gtab.b0_threshold)[0]\n    print(\"%s%s\" % ('b0\\'s found at: ', b0s))\n\n    # Show info\n    print(gtab.info)\n\n    # Save gradient table to pickle\n    save_pickle(gtab_file, gtab)\n\n    # Extract and Combine all b0s collected\n    print('Extracting b0\\'s...')\n    cmds = []\n    b0s_bbr = []\n    for b0 in b0s:\n        print(b0)\n        b0_bbr = \"{}/{}_b0.nii.gz\".format(outdir, str(b0))\n        cmds.append('fslroi {} {} {} 1'.format(dwi_file, b0_bbr, str(b0), ' 1'))\n        b0s_bbr.append(b0_bbr)\n\n    for cmd in cmds:\n        os.system(cmd)\n\n    # Get mean b0\n    mean_b0 = mean_img(b0s_bbr)\n    nib.save(mean_b0, nodif_b0)\n\n    # Get mean b0 brain mask\n    os.system(\"bet {} {} -m -f 0.2\".format(nodif_b0, nodif_b0_bet))\n    return gtab_file, nodif_b0_bet, nodif_b0_mask, dwi_file\n"
    ]
]