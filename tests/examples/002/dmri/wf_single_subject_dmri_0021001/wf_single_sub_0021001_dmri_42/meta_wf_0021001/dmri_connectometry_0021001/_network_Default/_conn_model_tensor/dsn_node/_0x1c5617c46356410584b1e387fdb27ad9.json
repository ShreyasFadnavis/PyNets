[
    [
        "ID",
        "0021001"
    ],
    [
        "atlas",
        "DesikanKlein2012"
    ],
    [
        "atlas_mni",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/reg_dmri/anat_reg/DesikanKlein2012_t1w_mni.nii.gz",
            "a7087f2f7ade442bf117c9e5912c6d86"
        ]
    ],
    [
        "basedir_path",
        "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/reg_dmri"
    ],
    [
        "binary",
        false
    ],
    [
        "conn_model",
        "tensor"
    ],
    [
        "coords",
        [
            [
                "41.4603671909",
                "-7.7177768031",
                "44.1708753681"
            ],
            [
                "22.6098634963",
                "-4.5623073536",
                "-31.9564068692"
            ],
            [
                "46.2461318734",
                "-65.4156153297",
                "30.4098428945"
            ],
            [
                "-3.6434285714",
                "-66.6897142857",
                "-23.6074285714"
            ],
            [
                "-4.4676425270",
                "-50.6399589111",
                "-13.2000513611"
            ],
            [
                "-50.2513679091",
                "-10.3992891549",
                "-6.6312491231"
            ],
            [
                "25.5100781250",
                "-60.2636718750",
                "53.3001562500"
            ],
            [
                "-29.8504807002",
                "-89.2247094275",
                "1.5027263596"
            ],
            [
                "32.8091522695",
                "-86.4223171713",
                "2.0475571243"
            ],
            [
                "-57.4605569733",
                "-27.8087762121",
                "-12.6587151892"
            ],
            [
                "5.8621818182",
                "37.5320000000",
                "2.9570909091"
            ],
            [
                "45.2940634681",
                "-21.8887214268",
                "43.8319517709"
            ],
            [
                "-6.1731694281",
                "-25.6816319259",
                "57.7997505790"
            ],
            [
                "10.7746656176",
                "-15.9367427223",
                "-9.7904012589"
            ],
            [
                "46.0602240896",
                "-17.9747899160",
                "8.1120448179"
            ],
            [
                "13.6988191034",
                "-66.4238687428",
                "-5.0391890480"
            ],
            [
                "49.0241624365",
                "-28.1792893401",
                "-27.2967851100"
            ],
            [
                "-13.2938431774",
                "-67.5089336520",
                "-5.8789120291"
            ],
            [
                "26.3080739738",
                "-20.5345060893",
                "-12.8123590438"
            ],
            [
                "5.4625651042",
                "21.5432942708",
                "28.0429687500"
            ],
            [
                "-48.3254319281",
                "-28.4269523151",
                "-28.3011748445"
            ],
            [
                "7.9032258065",
                "-44.9835483871",
                "19.3064516129"
            ]
        ]
    ],
    [
        "curv_thr_list",
        [
            60,
            30,
            10
        ]
    ],
    [
        "dens_thresh",
        true
    ],
    [
        "dir_path",
        "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/DesikanKlein2012"
    ],
    [
        "disp_filt",
        false
    ],
    [
        "fa_path",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/tensor_fa.nii.gz",
            "ccd3811eab3551b30f11871448b48d4c"
        ]
    ],
    [
        "function_str",
        "def direct_streamline_norm(streams, fa_path, dir_path, track_type, target_samples, conn_model, network, node_size,\n                           dens_thresh, ID, roi, min_span_tree, disp_filt, parc, prune, atlas, uatlas,\n                           labels, coords, norm, binary, atlas_mni, basedir_path, curv_thr_list, step_list,\n                           overwrite=False):\n    \"\"\"\n    A Function to perform normalization of streamlines tracked in native diffusion space to an\n    FSL_HCP1065_FA_2mm.nii.gz template in MNI space.\n\n    Parameters\n    ----------\n    streams : str\n        File path to save streamline array sequence in .trk format.\n    fa_path : str\n        File path to FA Nifti1Image.\n    dir_path : str\n        Path to directory containing subject derivative data for a given pynets run.\n    track_type : str\n        Tracking algorithm used (e.g. 'local' or 'particle').\n    target_samples : int\n        Total number of streamline samples specified to generate streams.\n    conn_model : str\n        Connectivity reconstruction method (e.g. 'csa', 'tensor', 'csd').\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. 'Default')\n        used to filter nodes in the study of brain subgraphs.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI's for tracking.\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    ID : str\n        A subject id or other unique identifier.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        'backbone network' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to graph nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    atlas_mni : str\n        File path to atlas parcellation Nifti1Image in T1w-warped MNI space.\n    basedir_path : str\n        Path to directory to output direct-streamline normalized temp files and outputs.\n    curv_thr_list : list\n        List of integer curvature thresholds used to perform ensemble tracking.\n    step_list : list\n        List of float step-sizes used to perform ensemble tracking.\n\n    Returns\n    -------\n    streams_warp : str\n        File path to normalized streamline array sequence in .trk format.\n    dir_path : str\n        Path to directory containing subject derivative data for a given pynets run.\n    track_type : str\n        Tracking algorithm used (e.g. 'local' or 'particle').\n    target_samples : int\n        Total number of streamline samples specified to generate streams.\n    conn_model : str\n        Connectivity reconstruction method (e.g. 'csa', 'tensor', 'csd').\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. 'Default')\n        used to filter nodes in the study of brain subgraphs.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI's for tracking.\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    ID : str\n        A subject id or other unique identifier.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        'backbone network' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to graph nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    atlas_mni : str\n        File path to atlas parcellation Nifti1Image in T1w-warped MNI space.\n\n    References\n    ----------\n    .. [1] Greene, C., Cieslak, M., & Grafton, S. T. (2017). Effect of different spatial normalization approaches on\n           tractography and structural brain networks. Network Neuroscience, 1-19.\n    \"\"\"\n    import warnings\n    warnings.filterwarnings(\"ignore\")\n    from dipy.tracking.streamline import Streamlines\n    from pynets.registration import reg_utils as regutils\n    from pynets.registration.register import Warp\n    import pkg_resources\n\n    template_path = pkg_resources.resource_filename(\"pynets\", \"templates/FSL_HCP1065_FA_2mm.nii.gz\")\n\n    dsn_dir = \"%s%s\" % (basedir_path, '/dmri_tmp/DSN')\n    if not os.path.isdir(dsn_dir):\n        os.mkdir(dsn_dir)\n\n    streams_mni = \"%s%s%s%s%s%s%s%s%s%s%s%s\" % (dir_path, '/streamlines_mni_', conn_model, '_', target_samples,\n                                                '_', node_size, 'mm_curv', str(curv_thr_list).replace(', ', '_'),\n                                                '_step', str(step_list).replace(', ', '_'), '.trk')\n\n    # Run ANTs reg\n    t_aff = \"%s%s\" % (dsn_dir, '/0GenericAffine.mat')\n    t_warp = \"%s%s\" % (dsn_dir, '/1Warp.nii.gz')\n\n    fa_path_img = nib.load(fa_path)\n    fa_flip_path = \"%s%s\" % (fa_path.split('.nii.gz')[0], '_flip.nii.gz')\n    s_aff = fa_path_img.affine\n    s_aff[0][0] = -s_aff[0][0]\n    fa_path_img.set_sform(s_aff)\n    fa_path_img.set_qform(s_aff)\n    fa_path_img.update_header()\n    nib.save(fa_path_img, fa_flip_path)\n\n    if ((os.path.isfile(t_aff) is False) and (os.path.isfile(t_warp) is False)) or (overwrite is True):\n        regutils.antssyn(template_path, fa_flip_path, dsn_dir)\n\n    # Warp streamlines\n    wS = Warp(streams, streams_mni, template_path, t_aff, t_warp, fa_path, dsn_dir)\n    wS.streamlines()\n\n    s_aff[:3, 3] = np.array([270, 0, 0])\n    streamlines_mni = nib.streamlines.load(streams_mni)\n    streamlines_mni_s = streamlines_mni.streamlines\n    streamlines_trans = Streamlines(regutils.transform_to_affine(streamlines_mni_s, streamlines_mni.header, s_aff))\n    streams_warp = \"%s%s\" % (streams_mni.split('.trk')[0], '_warped.trk')\n    tractogram = nib.streamlines.Tractogram(streamlines_trans, affine_to_rasmm=np.eye(4))\n    trkfile = nib.streamlines.trk.TrkFile(tractogram, header=streamlines_mni.header)\n    nib.streamlines.save(trkfile, streams_warp)\n    print(streams_warp)\n\n    return streams_warp, dir_path, track_type, target_samples, conn_model, network, node_size, dens_thresh, ID, roi, min_span_tree, disp_filt, parc, prune, atlas, uatlas, labels, coords, norm, binary, atlas_mni\n"
    ],
    [
        "labels",
        [
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan"
        ]
    ],
    [
        "min_span_tree",
        false
    ],
    [
        "network",
        null
    ],
    [
        "node_size",
        null
    ],
    [
        "norm",
        0
    ],
    [
        "parc",
        true
    ],
    [
        "prune",
        "1"
    ],
    [
        "roi",
        null
    ],
    [
        "step_list",
        [
            "0.2000000000",
            "0.3000000000",
            "0.4000000000",
            "0.5000000000"
        ]
    ],
    [
        "streams",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/DesikanKlein2012/streamlines_tensor_100000_Nonemm_curv[60_30_10]_step[0.2_0.3_0.4_0.5].trk",
            "4b31ed44c1b881905ffe9c96db24aeca"
        ]
    ],
    [
        "target_samples",
        "100000"
    ],
    [
        "track_type",
        "particle"
    ],
    [
        "uatlas",
        [
            "/Users/derekpisner/Applications/PyNets/pynets/atlases/DesikanKlein2012.nii.gz",
            "8b05327694ff8612e04249dae9d49822"
        ]
    ]
]