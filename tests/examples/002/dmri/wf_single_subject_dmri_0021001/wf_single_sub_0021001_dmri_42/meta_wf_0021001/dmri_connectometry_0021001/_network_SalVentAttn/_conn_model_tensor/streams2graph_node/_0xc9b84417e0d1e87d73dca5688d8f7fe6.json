[
    [
        "ID",
        "0021001"
    ],
    [
        "atlas",
        "DesikanKlein2012"
    ],
    [
        "atlas_mni",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/reg_dmri/anat_reg/DesikanKlein2012_t1w_mni.nii.gz",
            "a7087f2f7ade442bf117c9e5912c6d86"
        ]
    ],
    [
        "binary",
        false
    ],
    [
        "conn_model",
        "tensor"
    ],
    [
        "coords",
        [
            [
                "54.1869893869",
                "-35.0466519050",
                "36.2273803161"
            ],
            [
                "-13.2938431774",
                "-67.5089336520",
                "-5.8789120291"
            ],
            [
                "7.5376302586",
                "-24.8548822848",
                "58.6949054419"
            ],
            [
                "-5.2133712660",
                "-18.3926031294",
                "39.6963015647"
            ],
            [
                "22.6098634963",
                "-4.5623073536",
                "-31.9564068692"
            ],
            [
                "-29.8504807002",
                "-89.2247094275",
                "1.5027263596"
            ],
            [
                "-6.1731694281",
                "-25.6816319259",
                "57.7997505790"
            ],
            [
                "20.5507772021",
                "-2.8352331606",
                "-0.7077720207"
            ],
            [
                "-4.0427093760",
                "-57.2475809142",
                "-38.7594260928"
            ],
            [
                "5.2300613497",
                "37.4843217451",
                "-17.2699386503"
            ],
            [
                "24.1039933444",
                "-29.3789517471",
                "-18.4342762063"
            ],
            [
                "-22.8722612650",
                "-5.0318313353",
                "-32.0425795783"
            ],
            [
                "34.7928110244",
                "-43.0476052809",
                "-20.9995181652"
            ],
            [
                "-35.8306627355",
                "12.0902448404",
                "47.0801179336"
            ],
            [
                "13.6988191034",
                "-66.4238687428",
                "-5.0391890480"
            ]
        ]
    ],
    [
        "dens_thresh",
        true
    ],
    [
        "dir_path",
        "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/DesikanKlein2012"
    ],
    [
        "disp_filt",
        false
    ],
    [
        "function_str",
        "def streams2graph(atlas_mni, streams, overlap_thr, dir_path, track_type, target_samples, conn_model, network, node_size,\n                  dens_thresh, ID, roi, min_span_tree, disp_filt, parc, prune, atlas, uatlas, labels,\n                  coords, norm, binary, voxel_size='2mm'):\n    '''\n    Use tracked streamlines as a basis for estimating a structural connectome.\n\n    Parameters\n    ----------\n    atlas_mni : str\n        File path to atlas parcellation Nifti1Image in T1w-warped MNI space.\n    streams : str\n        File path to streamline array sequence in .trk format.\n    overlap_thr : int\n        Number of voxels for which a given streamline must intersect with an ROI\n        for an edge to be counted.\n    dir_path : str\n        Path to directory containing subject derivative data for a given pynets run.\n    track_type : str\n        Tracking algorithm used (e.g. 'local' or 'particle').\n    target_samples : int\n        Total number of streamline samples specified to generate streams.\n    conn_model : str\n        Connectivity reconstruction method (e.g. 'csa', 'tensor', 'csd').\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. 'Default')\n        used to filter nodes in the study of brain subgraphs.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI's for tracking.\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    ID : str\n        A subject id or other unique identifier.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        'backbone network' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to graph nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    voxel_size : str\n        Target isotropic voxel resolution of all input Nifti1Image files.\n\n    Returns\n    -------\n    atlas_mni : str\n        File path to atlas parcellation Nifti1Image in T1w-warped MNI space.\n    streams : str\n        File path to streamline array sequence in .trk format.\n    conn_matrix : array\n        Adjacency matrix stored as an m x n array of nodes and edges.\n    track_type : str\n        Tracking algorithm used (e.g. 'local' or 'particle').\n    target_samples : int\n        Total number of streamline samples specified to generate streams.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    conn_model : str\n        Connectivity reconstruction method (e.g. 'csa', 'tensor', 'csd').\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. 'Default')\n        used to filter nodes in the study of brain subgraphs.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI's for tracking.\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    ID : str\n        A subject id or other unique identifier.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        'backbone network' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to graph nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    '''\n    import warnings\n    warnings.filterwarnings(\"ignore\")\n    from dipy.tracking.streamline import Streamlines\n    from dipy.tracking._utils import (_mapping_to_voxel, _to_voxel_coordinates)\n    import networkx as nx\n    from itertools import combinations\n    from collections import defaultdict\n    import time\n\n    # Read Streamlines\n    streamlines_mni = nib.streamlines.load(streams)\n    streamlines = Streamlines(streamlines_mni.streamlines)\n\n    # Load parcellation\n    atlas_data = nib.load(atlas_mni).get_fdata()\n\n    # Instantiate empty networkX graph object & dictionary\n    # Create voxel-affine mapping\n    lin_T, offset = _mapping_to_voxel(np.eye(4), voxel_size)\n    mx = len(np.unique(atlas_data.astype(np.int64)))\n    g = nx.Graph(ecount=0, vcount=mx)\n    edge_dict = defaultdict(int)\n    node_dict = dict(zip(np.unique(atlas_data), np.arange(mx)))\n\n    # Add empty vertices\n    for node in range(mx):\n        g.add_node(node)\n\n    # Build graph\n    start_time = time.time()\n    for s in streamlines:\n        # Map the streamlines coordinates to voxel coordinates\n        points = _to_voxel_coordinates(s, lin_T, offset)\n\n        # get labels for label_volume\n        i, j, k = points.T\n        lab_arr = atlas_data[i, j, k]\n        endlabels = []\n        for lab in np.unique(lab_arr):\n            if lab > 0:\n                if np.sum(lab_arr == lab) >= overlap_thr:\n                    endlabels.append(node_dict[lab])\n\n        edges = combinations(endlabels, 2)\n        for edge in edges:\n            lst = tuple([int(node) for node in edge])\n            edge_dict[tuple(sorted(lst))] += 1\n\n        edge_list = [(k[0], k[1], v) for k, v in edge_dict.items()]\n        g.add_weighted_edges_from(edge_list)\n    print(\"%s%s%s\" % ('Graph construction runtime: ',\n    np.round(time.time() - start_time, 1), 's'))\n\n    # Convert to numpy matrix\n    conn_matrix_raw = nx.to_numpy_matrix(g)\n\n    # Enforce symmetry\n    conn_matrix_symm = np.maximum(conn_matrix_raw, conn_matrix_raw.T)\n\n    # Remove background label\n    conn_matrix = conn_matrix_symm[1:, 1:]\n\n    return atlas_mni, streams, conn_matrix, track_type, target_samples, dir_path, conn_model, network, node_size, dens_thresh, ID, roi, min_span_tree, disp_filt, parc, prune, atlas, uatlas, labels, coords, norm, binary\n"
    ],
    [
        "labels",
        [
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan"
        ]
    ],
    [
        "min_span_tree",
        false
    ],
    [
        "network",
        null
    ],
    [
        "node_size",
        null
    ],
    [
        "norm",
        0
    ],
    [
        "overlap_thr",
        1
    ],
    [
        "parc",
        true
    ],
    [
        "prune",
        "1"
    ],
    [
        "roi",
        null
    ],
    [
        "streams",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/DesikanKlein2012/streamlines_mni_tensor_100000_Nonemm_curv[60_30_10]_step[0.2_0.3_0.4_0.5]_warped.trk",
            "693bfa4f8e1fa92b10a7d47f0288f0e2"
        ]
    ],
    [
        "target_samples",
        "100000"
    ],
    [
        "track_type",
        "particle"
    ],
    [
        "uatlas",
        [
            "/Users/derekpisner/Applications/PyNets/pynets/atlases/DesikanKlein2012.nii.gz",
            "8b05327694ff8612e04249dae9d49822"
        ]
    ]
]