[
    [
        "atlas",
        "DesikanKlein2012"
    ],
    [
        "dwi_file",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/iso_eddy_corrected_data_denoised.nii.gz",
            "a9e120f4e5bdf26be21d106086b49267"
        ]
    ],
    [
        "fbval",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/bval.bval",
            "6d3b7524dcc4b0f3941439db40d56eda"
        ]
    ],
    [
        "fbvec",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/dmri/std_dmri/bvecs.bvec",
            "a74e963f16b3b5d5fcdb4a1b400f6fc5"
        ]
    ],
    [
        "function_str",
        "def make_gtab_and_bmask(fbval, fbvec, dwi_file, network, node_size, atlas):\n    \"\"\"\n    Create gradient table from bval/bvec, and a mean B0 brain mask.\n\n    Parameters\n    ----------\n    fbval : str\n        File name of the b-values file.\n    fbvec : str\n        File name of the b-vectors file.\n    dwi_file : str\n        File path to diffusion weighted image.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. 'Default') used to filter nodes in the study of\n        brain subgraphs.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI's.\n    atlas : str\n        Name of a Nilearn-hosted coordinate or parcellation/label-based atlas supported for fetching.\n        See Nilearn's datasets.atlas module for more detailed reference.\n\n    Returns\n    -------\n    gtab_file : str\n        File path to pickled DiPy gradient table object.\n    nodif_b0_bet : str\n        File path to mean brain-extracted B0 image.\n    B0_mask : str\n        File path to mean B0 brain mask.\n    dwi_file : str\n        File path to diffusion weighted image.\n    \"\"\"\n    import os\n    from dipy.io import save_pickle\n    import os.path as op\n    from dipy.io import read_bvals_bvecs\n    from dipy.core.gradients import gradient_table\n    from nilearn.image import mean_img\n    from pynets.utils import rescale_bvec\n\n    outdir = op.dirname(dwi_file)\n\n    B0 = \"%s%s\" % (outdir, \"/b0.nii.gz\")\n    B0_bet = \"%s%s\" % (outdir, \"/b0_bet.nii.gz\")\n    B0_mask = \"%s%s\" % (outdir, \"/B0_bet_mask.nii.gz\")\n    bvec_rescaled = \"%s%s\" % (outdir, \"/bvec_scaled.bvec\")\n    gtab_file = \"%s%s\" % (outdir, \"/gtab.pkl\")\n\n    # loading bvecs/bvals\n    bvals, bvecs = read_bvals_bvecs(fbval, fbvec)\n    bvecs[np.where(np.any(abs(bvecs) >= 10, axis=1) == True)] = [1, 0, 0]\n    bvecs[np.where(bvals == 0)] = 0\n    if len(bvecs[np.where(np.logical_and(bvals > 50, np.all(abs(bvecs) == np.array([0, 0, 0]), axis=1)))]) > 0:\n        raise ValueError('WARNING: Encountered potentially corrupted bval/bvecs. Check to ensure volumes with a '\n                         'diffusion weighting are not being treated as B0\\'s along the bvecs')\n    np.savetxt(fbval, bvals)\n    np.savetxt(fbvec, bvecs)\n    bvec_rescaled = rescale_bvec(fbvec, bvec_rescaled)\n    if fbval and bvec_rescaled:\n        bvals, bvecs = read_bvals_bvecs(fbval, bvec_rescaled)\n    else:\n        raise ValueError('Either bvals or bvecs files not found (or rescaling failed)!')\n\n    # Creating the gradient table\n    gtab = gradient_table(bvals, bvecs)\n\n    # Correct b0 threshold\n    gtab.b0_threshold = min(bvals)\n\n    # Get b0 indices\n    b0s = np.where(gtab.bvals == gtab.b0_threshold)[0]\n    print(\"%s%s\" % ('b0\\'s found at: ', b0s))\n\n    # Show info\n    print(gtab.info)\n\n    # Save gradient table to pickle\n    save_pickle(gtab_file, gtab)\n\n    # Extract and Combine all b0s collected\n    print('Extracting b0\\'s...')\n    cmds = []\n    b0s_bbr = []\n    for b0 in b0s:\n        print(b0)\n        b0_bbr = \"{}/{}_b0.nii.gz\".format(outdir, str(b0))\n        cmds.append('fslroi {} {} {} 1'.format(dwi_file, b0_bbr, str(b0), ' 1'))\n        b0s_bbr.append(b0_bbr)\n\n    for cmd in cmds:\n        os.system(cmd)\n\n    # Get mean b0\n    mean_b0 = mean_img(b0s_bbr)\n    nib.save(mean_b0, B0)\n\n    # Get mean b0 brain mask\n    os.system(\"bet {} {} -m -f 0.2\".format(B0, B0_bet))\n    return gtab_file, B0_bet, B0_mask, dwi_file\n"
    ],
    [
        "network",
        "SalVentAttn"
    ],
    [
        "node_size",
        null
    ]
]