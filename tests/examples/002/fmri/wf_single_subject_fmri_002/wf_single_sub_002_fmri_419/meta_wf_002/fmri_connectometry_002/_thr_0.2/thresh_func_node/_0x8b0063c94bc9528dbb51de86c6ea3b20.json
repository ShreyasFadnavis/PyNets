[('ID', '002'), ('atlas', 'coords_dosenbach_2010'), ('binary', False), ('c_boot', 0), ('conn_matrix', array([[ 1.        ,  0.10197797,  0.00481675, ..., -0.02624492,
         0.02465251, -0.02556148],
       [ 0.10197783,  1.        ,  0.06229895, ..., -0.09429631,
        -0.0906499 ,  0.07526883],
       [ 0.00481697,  0.06229897,  1.        , ...,  0.05232626,
         0.1040144 , -0.02635631],
       ...,
       [-0.02624481, -0.09429628,  0.05232591, ...,  1.        ,
         0.03630542,  0.03890239],
       [ 0.02465215, -0.09064972,  0.10401498, ...,  0.03630498,
         1.        , -0.01277958],
       [-0.02556124,  0.07526927, -0.02635694, ...,  0.03890441,
        -0.01277967,  1.        ]], dtype=float32)), ('conn_model', 'partcorr'), ('coords', array([[ 18, -81, -33],
       [-21, -79, -33],
       [ -6, -79, -33],
       [ 33, -73, -30],
       [-34, -67, -29],
       [ 32, -61, -31],
       [-25, -60, -34],
       [-37, -54, -37],
       [ 21, -64, -22],
       [-34, -57, -24],
       [-24, -54, -21],
       [-28, -44, -25],
       [  5, -75, -11],
       [ 14, -75, -21],
       [-11, -72, -14],
       [  1, -66, -24],
       [-16, -64, -21],
       [ -6, -60, -15],
       [ -2,  30,  27],
       [-52, -63,  15],
       [ 27,  49,  26],
       [-41, -47,  29],
       [-36,  18,   2],
       [ 38,  21,  -1],
       [ 11, -24,   2],
       [-20,   6,   7],
       [ 14,   6,   7],
       [ -6,  17,  34],
       [  9,  20,  34],
       [ 54, -31, -18],
       [  0,  15,  45],
       [-30, -14,   1],
       [ 32, -12,   2],
       [ 37,  -2,  -3],
       [-55, -44,  30],
       [ 58, -41,  20],
       [ -4, -31,  -4],
       [-30, -28,   9],
       [  8, -40,  50],
       [ 42, -46,  21],
       [-59, -47,  11],
       [ 43, -43,   8],
       [ 51, -30,   5],
       [-12, -12,   6],
       [ 11, -12,   6],
       [-12,  -3,  13],
       [-48,   6,   1],
       [-46,  10,  14],
       [ 51,  23,   8],
       [ 34,  32,   7],
       [  9,  39,  20],
       [-36, -69,  40],
       [-25,  51,  27],
       [-48, -63,  35],
       [ 51, -59,  34],
       [ 28, -37, -15],
       [-61, -41,  -2],
       [-59, -25, -15],
       [ 52, -15, -13],
       [  0,  51,  32],
       [-42, -76,  26],
       [ -2, -75,  32],
       [ -9, -72,  41],
       [ 45, -72,  29],
       [-28, -42, -11],
       [-11, -58,  17],
       [ 10, -55,  17],
       [ -5, -52,  17],
       [ -5, -43,  25],
       [ -8, -41,   3],
       [  1, -26,  31],
       [ 11, -68,  42],
       [ -6, -56,  29],
       [  5, -50,  33],
       [  9, -43,  25],
       [ -3, -38,  45],
       [-16,  29,  54],
       [ 23,  33,  47],
       [ 46,  39, -15],
       [  8,  42,  -5],
       [-11,  45,  17],
       [ -6,  50,  -1],
       [  9,  51,  16],
       [  6,  64,   3],
       [ -1,  28,  40],
       [ 44, -52,  47],
       [-53, -50,  39],
       [-48, -47,  49],
       [ 54, -44,  43],
       [-41, -40,  42],
       [ 32, -59,  41],
       [-32, -58,  46],
       [ 29,  57,  18],
       [-29,  57,  10],
       [-42,   7,  36],
       [ 44,   8,  34],
       [ 40,  17,  40],
       [-44,  27,  33],
       [ 46,  28,  31],
       [ 40,  36,  29],
       [-35, -46,  48],
       [-52,  28,  17],
       [-43,  47,   2],
       [ 42,  48,  -3],
       [ 39,  42,  16],
       [ 20, -78,  -2],
       [ 15, -77,  32],
       [-16, -76,  33],
       [  9, -76,  14],
       [-29, -75,  28],
       [ 29, -73,  29],
       [ 39, -71,  13],
       [ 17, -68,  20],
       [ 19, -66,  -1],
       [-44, -63,  -7],
       [-34, -60,  -5],
       [ 36, -60,  -8],
       [-18, -50,   1],
       [ -4, -94,  12],
       [ 13, -91,   2],
       [ 27, -91,   2],
       [-29, -88,   8],
       [-37, -83,  -2],
       [ 29, -81,  14],
       [ 33, -81,  -2],
       [ -5, -80,   9],
       [ 46, -62,   5],
       [  0,  -1,  52],
       [ 60,   8,  34],
       [ 53,  -3,  32],
       [ 58,  11,  14],
       [ 33, -12,  16],
       [-36, -12,  15],
       [-42,  -3,  11],
       [-24, -30,  64],
       [ 18, -27,  62],
       [-38, -27,  60],
       [ 41, -23,  55],
       [-55, -22,  38],
       [ 46, -20,  45],
       [-47, -18,  50],
       [-38, -15,  59],
       [-47, -12,  36],
       [-26,  -8,  54],
       [ 42, -24,  17],
       [-41, -31,  48],
       [ 10,   5,  51],
       [-54, -22,  22],
       [ 44, -11,  38],
       [-54,  -9,  23],
       [ 46,  -8,  24],
       [-44,  -6,  49],
       [ 58,  -3,  17],
       [ 34, -39,  65],
       [-41, -37,  16],
       [-53, -37,  13],
       [-54, -22,   9],
       [ 59, -13,   8],
       [ 43,   1,  12],
       [-55,   7,  23]])), ('dens_thresh', False), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/coords_dosenbach_2010'), ('disp_filt', False), ('function_str', 'def thresh_func(dens_thresh, thr, conn_matrix, conn_model, network, ID, dir_path, roi, node_size, min_span_tree,\n                smooth, disp_filt, parc, prune, atlas, uatlas, labels, coords, c_boot, norm, binary,\n                hpass):\n    """\n    Threshold a functional connectivity matrix using any of a variety of methods.\n\n    Parameters\n    ----------\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    thr : float\n        A value, between 0 and 1, to threshold the graph using any variety of methods\n        triggered through other options.\n    conn_matrix : array\n        Adjacency matrix stored as an m x n array of nodes and edges.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        \'backbone network\' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n\n    Returns\n    -------\n    conn_matrix_thr : array\n        Weighted, thresholded, NxN matrix.\n    edge_threshold : str\n        The string percentage representation of thr.\n    est_path : str\n        File path to the thresholded graph, conn_matrix_thr, saved as a numpy array in .npy format.\n    thr : float\n        The value, between 0 and 1, used to threshold the graph using any variety of methods\n        triggered through other options.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    from pynets.core import utils, thresholding\n\n    thr_perc = 100 * float(thr)\n    if parc is True:\n        node_size = \'parc\'\n\n    if np.count_nonzero(conn_matrix) == 0:\n        raise ValueError(\'ERROR: Raw connectivity matrix contains only zeros.\')\n\n    # Save unthresholded\n    unthr_path = utils.create_raw_path_func(ID, network, conn_model, roi, dir_path, node_size, smooth, c_boot,\n                                            hpass, parc)\n    utils.save_mat(conn_matrix, unthr_path)\n\n    if min_span_tree is True:\n        print(\'Using local thresholding option with the Minimum Spanning Tree (MST)...\\n\')\n        if dens_thresh is False:\n            print(\'Ignoring -dt flag since local density thresholding is not currently supporting.\')\n        thr_type = \'MST_thr\'\n        edge_threshold = "%s%s" % (str(1 - thr_perc), \'%\')\n        [conn_matrix_thr, coords, labels] = thresholding.local_thresholding_prop(conn_matrix, thr, coords, labels)\n    elif disp_filt is True:\n        thr_type = \'DISP_alpha\'\n        edge_threshold = "%s%s" % (str(1 - thr_perc), \'%\')\n        G1 = thresholding.disparity_filter(nx.from_numpy_array(conn_matrix))\n        # G2 = nx.Graph([(u, v, d) for u, v, d in G1.edges(data=True) if d[\'alpha\'] < thr])\n        print(\'Computing edge disparity significance with alpha = %s\' % thr)\n        print(\'Filtered graph: nodes = %s, edges = %s\' % (G1.number_of_nodes(), G1.number_of_edges()))\n        # print(\'Backbone graph: nodes = %s, edges = %s\' % (G2.number_of_nodes(), G2.number_of_edges()))\n        # print(G2.edges(data=True))\n        conn_matrix_thr = nx.to_numpy_array(G1)\n    else:\n        if dens_thresh is False:\n            thr_type = \'prop\'\n            edge_threshold = "%s%s" % (str(1 - thr_perc), \'%\')\n            print("%s%.2f%s" % (\'\\nThresholding proportionally at: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.threshold_proportional(conn_matrix, float(thr))\n        else:\n            thr_type = \'dens\'\n            edge_threshold = None\n            print("%s%.2f%s" % (\'\\nThresholding to achieve density of: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.density_thresholding(conn_matrix, float(thr))\n\n    if not nx.is_connected(nx.from_numpy_matrix(conn_matrix_thr)):\n        print(\'Warning: Fragmented graph\')\n\n    # Save thresholded mat\n    est_path = utils.create_est_path_func(ID, network, conn_model, thr, roi, dir_path, node_size, smooth, c_boot,\n                                          thr_type, hpass, parc)\n\n    utils.save_mat(conn_matrix_thr, est_path)\n\n    return conn_matrix_thr, edge_threshold, est_path, thr, node_size, network, conn_model, roi, smooth, prune, ID, dir_path, atlas, uatlas, labels, coords, c_boot, norm, binary, hpass\n'), ('hpass', None), ('labels', array(["inf cerebellum' 155", "inf cerebellum' 150",
       "inf cerebellum' 151", "inf cerebellum' 140",
       "inf cerebellum' 131", "inf cerebellum' 122",
       "inf cerebellum' 121", "inf cerebellum' 110",
       "lat cerebellum' 128", "lat cerebellum' 113",
       "lat cerebellum' 109", "lat cerebellum' 98", "med cerebellum' 143",
       "med cerebellum' 144", "med cerebellum' 138",
       "med cerebellum' 130", "med cerebellum' 127",
       "med cerebellum' 120", "ACC' 19", "TPJ' 125", "aPFC' 8",
       "angular gyrus' 102", "ant insula' 28", "ant insula' 26",
       "asal ganglia' 71", "asal ganglia' 38", "asal ganglia' 39",
       "asal ganglia' 30", "dACC' 27", "fusiform' 81", "mFC' 31",
       "mid insula' 61", "mid insula' 59", "mid insula' 44",
       "parietal' 97", "parietal' 89", "post cingulate' 80",
       "post insula' 76", "precuneus' 87", "sup temporal' 100",
       "temporal' 103", "temporal' 95", "temporal' 78", "thalamus' 57",
       "thalamus' 58", "thalamus' 47", "vFC' 40", "vFC' 33", "vFC' 25",
       "vPFC' 18", "ACC' 14", "IPS' 134", "aPFC' 5", "angular gyrus' 124",
       "angular gyrus' 117", "fusiform' 84", "inf temporal' 91",
       "inf temporal' 72", "inf temporal' 63", "mPFC' 4",
       "occipital' 146", "occipital' 141", "occipital' 136",
       "occipital' 137", "occipital' 92", "post cingulate' 115",
       "post cingulate' 111", "post cingulate' 108", "post cingulate' 93",
       "post cingulate' 90", "post cingulate' 73", "precuneus' 132",
       "precuneus' 112", "precuneus' 105", "precuneus' 94",
       "precuneus' 85", "sup frontal' 20", "sup frontal' 17", "vlPFC' 15",
       "vmPFC' 13", "vmPFC' 11", "vmPFC' 7", "vmPFC' 6", "vmPFC' 1",
       "ACC' 21", "IPL' 107", "IPL' 104", "IPL' 101", "IPL' 96",
       "IPL' 88", "IPS' 116", "IPS' 114", "aPFC' 2", "aPFC' 3", "dFC' 36",
       "dFC' 34", "dFC' 29", "dlPFC' 24", "dlPFC' 22", "dlPFC' 16",
       "post parietal' 99", "vPFC' 23", "vent aPFC' 10", "vent aPFC' 9",
       "vlPFC' 12", "occipital' 149", "occipital' 148", "occipital' 145",
       "occipital' 147", "occipital' 142", "occipital' 139",
       "occipital' 135", "occipital' 133", "occipital' 129",
       "occipital' 126", "occipital' 118", "occipital' 119",
       "occipital' 106", "post occipital' 160", "post occipital' 158",
       "post occipital' 159", "post occipital' 157",
       "post occipital' 156", "post occipital' 153",
       "post occipital' 154", "post occipital' 152", "temporal' 123",
       "SMA' 43", "dFC' 35", "frontal' 45", "frontal' 32",
       "mid insula' 55", "mid insula' 56", "mid insula' 48",
       "parietal' 77", "parietal' 74", "parietal' 75", "parietal' 69",
       "parietal' 66", "parietal' 65", "parietal' 64", "parietal' 62",
       "parietal' 54", "parietal' 50", "post insula' 70",
       "post parietal' 79", "pre-SMA' 41", "precentral gyrus' 67",
       "precentral gyrus' 53", "precentral gyrus' 52",
       "precentral gyrus' 51", "precentral gyrus' 49",
       "precentral gyrus' 46", "sup parietal' 86", "temporal' 82",
       "temporal' 83", "temporal' 68", "temporal' 60", "vFC' 42",
       "vFC' 37"], dtype='<U20')), ('min_span_tree', False), ('network', None), ('node_size', 4), ('norm', 0), ('parc', False), ('prune', 2), ('roi', None), ('smooth', 0), ('thr', '0.2000000000'), ('uatlas', None)]