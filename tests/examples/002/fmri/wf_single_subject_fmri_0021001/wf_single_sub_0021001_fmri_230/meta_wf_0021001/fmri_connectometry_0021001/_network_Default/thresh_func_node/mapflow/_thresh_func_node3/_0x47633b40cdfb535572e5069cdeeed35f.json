[('ID', '0021001'), ('atlas', 'DesikanKlein2012'), ('binary', False), ('c_boot', 0), ('conn_matrix', array([[-1.1043601 ,  0.        ,  0.0565755 ,  0.        ,  0.04192131,
         0.30921281, -0.        , -0.        , -0.01544353, -0.        ,
        -0.        , -0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.05159311, -0.        , -0.        ,
         0.        ,  0.        , -0.        ,  0.        ],
       [ 0.        , -1.42976628, -0.        ,  0.        ,  0.        ,
         0.09893272, -0.        ,  0.        ,  0.        , -0.09044454,
         0.04549355,  0.        ,  0.        , -0.        ,  0.        ,
         0.        ,  0.38498149,  0.50926787,  0.        ,  0.03046538,
         0.        ,  0.        , -0.        ,  0.        ],
       [ 0.0565755 , -0.        , -1.73502564,  0.        ,  0.        ,
         0.0357415 ,  0.55515666,  0.13314762,  0.14565982,  0.16179839,
         0.        ,  0.26183318,  0.        ,  0.        ,  0.        ,
         0.01090732,  0.        , -0.        ,  0.0207631 ,  0.        ,
         0.27123468,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        , -1.42897807,  0.        ,
         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.13754909,  0.22665762,  0.        ,  0.05130301,
         0.        ,  0.30209679,  0.03654139,  0.04170026,  0.07886333,
         0.36784109, -0.        ,  0.        , -0.        ],
       [ 0.04192131,  0.        ,  0.        ,  0.        , -1.16011597,
         0.0261716 , -0.        ,  0.07123918,  0.        ,  0.        ,
         0.        ,  0.        ,  0.0903191 ,  0.00867396,  0.10761162,
         0.        , -0.        ,  0.31296789,  0.00245109, -0.        ,
         0.        ,  0.        ,  0.        ,  0.02304423],
       [ 0.30921281,  0.09893272,  0.0357415 ,  0.        ,  0.0261716 ,
        -1.14036184,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        , -0.        ,  0.        ,
         0.06618406,  0.        ,  0.04404083,  0.        ,  0.04243663,
         0.        ,  0.        ,  0.        ,  0.05988228],
       [-0.        , -0.        ,  0.55515666,  0.        , -0.        ,
         0.        , -2.05037071,  0.30206754,  0.        ,  0.24842529,
         0.        ,  0.55797326,  0.        ,  0.        ,  0.13023497,
         0.03041031,  0.        , -0.        ,  0.        ,  0.25548575,
         0.07378266,  0.        ,  0.        ,  0.        ],
       [-0.        ,  0.        ,  0.13314762,  0.        ,  0.07123918,
         0.        ,  0.30206754, -1.62467074,  0.16139037,  0.11259965,
         0.        ,  0.        ,  0.        ,  0.        ,  0.40959456,
         0.        ,  0.        ,  0.        ,  0.        ,  0.13126381,
         0.        ,  0.17349245,  0.        ,  0.        ],
       [-0.01544353,  0.        ,  0.14565982,  0.        ,  0.        ,
         0.        ,  0.        ,  0.16139037, -2.10217957,  0.100512  ,
         0.18331692,  0.24357845,  0.        , -0.        ,  0.28370345,
         0.        ,  0.        ,  0.        ,  0.26938497,  0.        ,
         0.07127912,  0.77849964,  0.04032132,  0.00505052],
       [-0.        , -0.09044454,  0.16179839,  0.        ,  0.        ,
         0.        ,  0.24842529,  0.11259965,  0.100512  , -1.38995824,
         0.        ,  0.        ,  0.16529553,  0.37641869,  0.        ,
         0.        , -0.        , -0.0735861 ,  0.        ,  0.08656837,
         0.        ,  0.        ,  0.        ,  0.        ],
       [-0.        ,  0.04549355,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ,  0.18331692,  0.        ,
        -1.53161172,  0.15628747,  0.        , -0.        ,  0.16694612,
         0.08997745,  0.        ,  0.        ,  0.02470645,  0.        ,
         0.05877751,  0.48196638,  0.        ,  0.14104226],
       [-0.        ,  0.        ,  0.26183318,  0.13754909,  0.        ,
         0.        ,  0.55797326,  0.        ,  0.24357845,  0.        ,
         0.15628747, -1.69364273,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        , -0.        ,  0.04777646,  0.        ,
         0.10579463,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.22665762,  0.0903191 ,
         0.        ,  0.        ,  0.        ,  0.        ,  0.16529553,
         0.        ,  0.        , -1.17125314,  0.1029374 ,  0.10168142,
         0.        ,  0.02376775,  0.        ,  0.04833472,  0.03219124,
         0.        ,  0.        , -0.        ,  0.        ],
       [ 0.        , -0.        ,  0.        ,  0.        ,  0.00867396,
        -0.        ,  0.        ,  0.        , -0.        ,  0.37641869,
        -0.        ,  0.        ,  0.1029374 , -1.15588965, -0.        ,
        -0.05296467, -0.11269795, -0.05971128, -0.        , -0.        ,
        -0.        , -0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.05130301,  0.10761162,
         0.        ,  0.13023497,  0.40959456,  0.28370345,  0.        ,
         0.16694612,  0.        ,  0.10168142, -0.        , -1.6807008 ,
         0.        ,  0.29465923,  0.05671613,  0.        ,  0.06880885,
         0.        ,  0.04762927,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.01090732,  0.        ,  0.        ,
         0.06618406,  0.03041031,  0.        ,  0.        ,  0.        ,
         0.08997745,  0.        ,  0.        , -0.05296467,  0.        ,
        -1.36520166,  0.        ,  0.00689807,  0.55269143,  0.        ,
         0.        ,  0.        ,  0.0210227 ,  0.17255287],
       [ 0.        ,  0.38498149,  0.        ,  0.30209679, -0.        ,
         0.        ,  0.        ,  0.        ,  0.        , -0.        ,
         0.        ,  0.        ,  0.02376775, -0.11269795,  0.29465923,
         0.        , -1.63812159,  0.13702306,  0.        ,  0.42059064,
         0.        ,  0.        ,  0.        , -0.        ],
       [ 0.05159311,  0.50926787, -0.        ,  0.03654139,  0.31296789,
         0.04404083, -0.        ,  0.        ,  0.        , -0.0735861 ,
         0.        , -0.        ,  0.        , -0.05971128,  0.05671613,
         0.00689807,  0.13702306, -1.57014065,  0.22712283,  0.        ,
         0.        ,  0.        ,  0.        ,  0.21770009],
       [-0.        ,  0.        ,  0.0207631 ,  0.04170026,  0.00245109,
         0.        ,  0.        ,  0.        ,  0.26938497,  0.        ,
         0.02470645,  0.04777646,  0.04833472, -0.        ,  0.        ,
         0.55269143,  0.        ,  0.22712283, -1.80590844,  0.24928333,
         0.23192777,  0.        ,  0.26193451,  0.12744102],
       [-0.        ,  0.03046538,  0.        ,  0.07886333, -0.        ,
         0.04243663,  0.25548575,  0.13126381,  0.        ,  0.08656837,
         0.        ,  0.        ,  0.03219124, -0.        ,  0.06880885,
         0.        ,  0.42059064,  0.        ,  0.24928333, -1.51305062,
         0.        , -0.        ,  0.        , -0.        ],
       [ 0.        ,  0.        ,  0.27123468,  0.36784109,  0.        ,
         0.        ,  0.07378266,  0.        ,  0.07127912,  0.        ,
         0.05877751,  0.10579463,  0.        , -0.        ,  0.        ,
         0.        ,  0.        ,  0.        ,  0.23192777,  0.        ,
        -1.46668663,  0.05319155,  0.        ,  0.00797935],
       [ 0.        ,  0.        ,  0.        , -0.        ,  0.        ,
         0.        ,  0.        ,  0.17349245,  0.77849964,  0.        ,
         0.48196638,  0.        ,  0.        , -0.        ,  0.04762927,
         0.        ,  0.        ,  0.        ,  0.        , -0.        ,
         0.05319155, -1.82400159,  0.        ,  0.        ],
       [-0.        , -0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ,  0.04032132,  0.        ,
         0.        ,  0.        , -0.        ,  0.        ,  0.        ,
         0.0210227 ,  0.        ,  0.        ,  0.26193451,  0.        ,
         0.        ,  0.        , -1.17184264,  0.2544698 ],
       [ 0.        ,  0.        ,  0.        , -0.        ,  0.02304423,
         0.05988228,  0.        ,  0.        ,  0.00505052,  0.        ,
         0.14104226,  0.        ,  0.        ,  0.        ,  0.        ,
         0.17255287, -0.        ,  0.21770009,  0.12744102, -0.        ,
         0.00797935,  0.        ,  0.2544698 , -1.28146616]])), ('conn_model', 'sps'), ('coords', array([[-40.,  32., -10.],
       [ 46., -66.,  30.],
       [ 52.,  -6.,  -8.],
       [-12.,  34.,  42.],
       [-36.,  12.,  48.],
       [ 42.,  34., -12.],
       [-50., -10.,  -6.],
       [ 10., -58.,  38.],
       [  8., -44.,  20.],
       [ 48.,  32.,   4.],
       [  6., -16.,  40.],
       [ -6., -18.,  40.],
       [-46.,  14.,  12.],
       [-46.,  32.,   6.],
       [ -8., -60.,  38.],
       [-22., -32., -18.],
       [-58., -28., -12.],
       [-42., -70.,  32.],
       [ -6.,  40.,   6.],
       [ 58., -26., -12.],
       [  6.,  38.,   2.],
       [ -6., -46.,  20.],
       [  6.,  38., -18.],
       [ -6.,  42., -16.]])), ('dens_thresh', True), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012'), ('disp_filt', False), ('function_str', 'def thresh_func(dens_thresh, thr, conn_matrix, conn_model, network, ID, dir_path, roi, node_size, min_span_tree,\n                smooth, disp_filt, parc, prune, atlas, uatlas, labels, coords, c_boot, norm, binary,\n                hpass):\n    """\n    Threshold a functional connectivity matrix using any of a variety of methods.\n\n    Parameters\n    ----------\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    thr : float\n        A value, between 0 and 1, to threshold the graph using any variety of methods\n        triggered through other options.\n    conn_matrix : array\n        Adjacency matrix stored as an m x n array of nodes and edges.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        \'backbone network\' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n\n    Returns\n    -------\n    conn_matrix_thr : array\n        Weighted, thresholded, NxN matrix.\n    edge_threshold : str\n        The string percentage representation of thr.\n    est_path : str\n        File path to the thresholded graph, conn_matrix_thr, saved as a numpy array in .npy format.\n    thr : float\n        The value, between 0 and 1, used to threshold the graph using any variety of methods\n        triggered through other options.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    from pynets import utils, thresholding\n\n    thr_perc = 100 * float(thr)\n    edge_threshold = "%s%s" % (str(thr_perc), \'%\')\n    if parc is True:\n        node_size = \'parc\'\n\n    if np.count_nonzero(conn_matrix) == 0:\n        raise ValueError(\'ERROR: Raw connectivity matrix contains only zeros.\')\n\n    # Save unthresholded\n    unthr_path = utils.create_unthr_path(ID, network, conn_model, roi, dir_path)\n    utils.save_mat(conn_matrix, unthr_path)\n\n    if min_span_tree is True:\n        print(\'Using local thresholding option with the Minimum Spanning Tree (MST)...\\n\')\n        if dens_thresh is False:\n            thr_type = \'MSTprop\'\n            conn_matrix_thr = thresholding.local_thresholding_prop(conn_matrix, thr)\n        else:\n            thr_type = \'MSTdens\'\n            conn_matrix_thr = thresholding.local_thresholding_dens(conn_matrix, thr)\n    elif disp_filt is True:\n        thr_type = \'DISP_alpha\'\n        G1 = thresholding.disparity_filter(nx.from_numpy_array(conn_matrix))\n        # G2 = nx.Graph([(u, v, d) for u, v, d in G1.edges(data=True) if d[\'alpha\'] < thr])\n        print(\'Computing edge disparity significance with alpha = %s\' % thr)\n        print(\'Filtered graph: nodes = %s, edges = %s\' % (G1.number_of_nodes(), G1.number_of_edges()))\n        # print(\'Backbone graph: nodes = %s, edges = %s\' % (G2.number_of_nodes(), G2.number_of_edges()))\n        # print(G2.edges(data=True))\n        conn_matrix_thr = nx.to_numpy_array(G1)\n    else:\n        if dens_thresh is False:\n            thr_type = \'prop\'\n            print("%s%.2f%s" % (\'\\nThresholding proportionally at: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.threshold_proportional(conn_matrix, float(thr))\n        else:\n            thr_type = \'dens\'\n            print("%s%.2f%s" % (\'\\nThresholding to achieve density of: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.density_thresholding(conn_matrix, float(thr))\n\n    if not nx.is_connected(nx.from_numpy_matrix(conn_matrix_thr)):\n        print(\'Warning: Fragmented graph\')\n\n    # Save thresholded mat\n    est_path = utils.create_est_path_func(ID, network, conn_model, thr, roi, dir_path, node_size, smooth, c_boot,\n                                          thr_type, hpass, parc)\n\n    utils.save_mat(conn_matrix_thr, est_path)\n\n    return conn_matrix_thr, edge_threshold, est_path, thr, node_size, network, conn_model, roi, smooth, prune, ID, dir_path, atlas, uatlas, labels, coords, c_boot, norm, binary, hpass\n'), ('hpass', None), ('labels', array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
       nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan])), ('min_span_tree', False), ('network', 'Default'), ('node_size', 4), ('norm', 0), ('parc', False), ('prune', '1'), ('roi', None), ('smooth', 0), ('thr', '0.18'), ('uatlas', ('/Users/derekpisner/Applications/PyNets/pynets/atlases/DesikanKlein2012.nii.gz', '8b05327694ff8612e04249dae9d49822'))]