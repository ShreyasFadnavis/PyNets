[('ID', '0021001'), ('atlas', 'DesikanKlein2012'), ('binary', False), ('c_boot', 0), ('conn_matrix', array([[ 1.        ,  0.05157137, -0.0139818 , -0.15027164,  0.196676  ,
         0.23304603, -0.2213621 ,  0.0559966 ,  0.02629719, -0.02112656,
        -0.13391571,  0.04361249,  0.05485772],
       [ 0.0515714 ,  1.        , -0.04543725, -0.01102507,  0.2880933 ,
        -0.05399826,  0.08786732, -0.04144286, -0.25926542,  0.42970395,
         0.18466903,  0.09145164,  0.16013475],
       [-0.01398177, -0.04543737,  1.        ,  0.1917636 , -0.15091196,
        -0.05671824,  0.1475208 ,  0.2753101 ,  0.25605178,  0.2600062 ,
        -0.12140288,  0.5006891 ,  0.02345307],
       [-0.15027161, -0.01102501,  0.19176352,  1.        , -0.03010713,
         0.32452264,  0.17500934,  0.07972948, -0.01935954,  0.01172975,
         0.32630524,  0.08446162,  0.02669676],
       [ 0.19667603,  0.2880934 , -0.15091194, -0.03010707,  1.        ,
         0.09773331,  0.43648282,  0.04829807,  0.02516149,  0.25601113,
         0.04158888,  0.12062829,  0.00251501],
       [ 0.23304603, -0.05399829, -0.05671819,  0.32452258,  0.09773333,
         1.        ,  0.06798077,  0.23134409,  0.03377183,  0.13278913,
         0.20557854,  0.01613062, -0.02231797],
       [-0.22136213,  0.08786732,  0.14752084,  0.17500931,  0.43648282,
         0.06798076,  1.        , -0.04525095,  0.08353516, -0.06644902,
        -0.10252836, -0.23272303,  0.1274711 ],
       [ 0.05599662, -0.04144286,  0.2753101 ,  0.07972948,  0.04829812,
         0.23134409, -0.04525094,  1.        , -0.12190589,  0.11077334,
        -0.12274347, -0.10854355,  0.451547  ],
       [ 0.0262972 , -0.25926536,  0.2560518 , -0.01935951,  0.02516145,
         0.03377186,  0.08353516, -0.12190592,  1.        ,  0.10630898,
         0.339892  ,  0.26479194, -0.25067243],
       [-0.02112656,  0.42970395,  0.26000607,  0.01172982,  0.25601113,
         0.13278912, -0.06644903,  0.11077334,  0.106309  ,  1.        ,
        -0.03432095, -0.0585015 , -0.256516  ],
       [-0.1339157 ,  0.18466902, -0.1214029 ,  0.32630524,  0.04158894,
         0.20557854, -0.10252838, -0.12274343,  0.33989203, -0.03432093,
         1.        ,  0.03241017,  0.27412447],
       [ 0.04361248,  0.0914516 ,  0.50068915,  0.08446164,  0.12062831,
         0.01613062, -0.23272303, -0.10854362,  0.26479197, -0.05850152,
         0.03241012,  1.        ,  0.2372087 ],
       [ 0.05485773,  0.16013475,  0.02345314,  0.02669681,  0.002515  ,
        -0.02231796,  0.12747106,  0.45154697, -0.25067246, -0.256516  ,
         0.2741245 ,  0.23720856,  1.        ]], dtype=float32)), ('conn_model', 'partcorr'), ('coords', array([[-40.,  32., -10.],
       [-54., -38.,  34.],
       [  6.,  22.,  28.],
       [-50., -10.,  -6.],
       [ 48.,  16.,  14.],
       [ 52.,  -6.,  -8.],
       [ 48.,  32.,   4.],
       [ 38.,   2.,   0.],
       [  6., -16.,  40.],
       [ 54., -36.,  36.],
       [ -6., -18.,  40.],
       [ -6.,  20.,  32.],
       [-36.,   2.,   0.]])), ('dens_thresh', True), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012'), ('disp_filt', False), ('function_str', 'def thresh_func(dens_thresh, thr, conn_matrix, conn_model, network, ID, dir_path, roi, node_size, min_span_tree,\n                smooth, disp_filt, parc, prune, atlas, uatlas, labels, coords, c_boot, norm, binary,\n                hpass):\n    """\n    Threshold a functional connectivity matrix using any of a variety of methods.\n\n    Parameters\n    ----------\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    thr : float\n        A value, between 0 and 1, to threshold the graph using any variety of methods\n        triggered through other options.\n    conn_matrix : array\n        Adjacency matrix stored as an m x n array of nodes and edges.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        \'backbone network\' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n\n    Returns\n    -------\n    conn_matrix_thr : array\n        Weighted, thresholded, NxN matrix.\n    edge_threshold : str\n        The string percentage representation of thr.\n    est_path : str\n        File path to the thresholded graph, conn_matrix_thr, saved as a numpy array in .npy format.\n    thr : float\n        The value, between 0 and 1, used to threshold the graph using any variety of methods\n        triggered through other options.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    from pynets import utils, thresholding\n\n    thr_perc = 100 * float(thr)\n    edge_threshold = "%s%s" % (str(thr_perc), \'%\')\n    if parc is True:\n        node_size = \'parc\'\n\n    if np.count_nonzero(conn_matrix) == 0:\n        raise ValueError(\'ERROR: Raw connectivity matrix contains only zeros.\')\n\n    # Save unthresholded\n    unthr_path = utils.create_unthr_path(ID, network, conn_model, roi, dir_path)\n    utils.save_mat(conn_matrix, unthr_path)\n\n    if min_span_tree is True:\n        print(\'Using local thresholding option with the Minimum Spanning Tree (MST)...\\n\')\n        if dens_thresh is False:\n            thr_type = \'MSTprop\'\n            conn_matrix_thr = thresholding.local_thresholding_prop(conn_matrix, thr)\n        else:\n            thr_type = \'MSTdens\'\n            conn_matrix_thr = thresholding.local_thresholding_dens(conn_matrix, thr)\n    elif disp_filt is True:\n        thr_type = \'DISP_alpha\'\n        G1 = thresholding.disparity_filter(nx.from_numpy_array(conn_matrix))\n        # G2 = nx.Graph([(u, v, d) for u, v, d in G1.edges(data=True) if d[\'alpha\'] < thr])\n        print(\'Computing edge disparity significance with alpha = %s\' % thr)\n        print(\'Filtered graph: nodes = %s, edges = %s\' % (G1.number_of_nodes(), G1.number_of_edges()))\n        # print(\'Backbone graph: nodes = %s, edges = %s\' % (G2.number_of_nodes(), G2.number_of_edges()))\n        # print(G2.edges(data=True))\n        conn_matrix_thr = nx.to_numpy_array(G1)\n    else:\n        if dens_thresh is False:\n            thr_type = \'prop\'\n            print("%s%.2f%s" % (\'\\nThresholding proportionally at: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.threshold_proportional(conn_matrix, float(thr))\n        else:\n            thr_type = \'dens\'\n            print("%s%.2f%s" % (\'\\nThresholding to achieve density of: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.density_thresholding(conn_matrix, float(thr))\n\n    if not nx.is_connected(nx.from_numpy_matrix(conn_matrix_thr)):\n        print(\'Warning: Fragmented graph\')\n\n    # Save thresholded mat\n    est_path = utils.create_est_path_func(ID, network, conn_model, thr, roi, dir_path, node_size, smooth, c_boot,\n                                          thr_type, hpass, parc)\n\n    utils.save_mat(conn_matrix_thr, est_path)\n\n    return conn_matrix_thr, edge_threshold, est_path, thr, node_size, network, conn_model, roi, smooth, prune, ID, dir_path, atlas, uatlas, labels, coords, c_boot, norm, binary, hpass\n'), ('hpass', None), ('labels', array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan])), ('min_span_tree', False), ('network', 'SalVentAttn'), ('node_size', 4), ('norm', 0), ('parc', False), ('prune', '1'), ('roi', None), ('smooth', 0), ('thr', '0.2'), ('uatlas', ('/Users/derekpisner/Applications/PyNets/pynets/atlases/DesikanKlein2012.nii.gz', '8b05327694ff8612e04249dae9d49822'))]