[
    [
        "function_str",
        "def check_orient_and_dims(infile, vox_size, bvecs=None):\n    \"\"\"\n    An API to reorient any image to RAS+ and resample any image to a given voxel resolution.\n\n    Parameters\n    ----------\n    infile : str\n        File path to a dwi Nifti1Image.\n    vox_size : str\n        Voxel size in mm. (e.g. 2mm).\n    bvecs : str\n        File path to corresponding bvecs file if infile is a dwi.\n\n    Returns\n    -------\n    outfile : str\n        File path to the reoriented and/or resample Nifti1Image.\n    bvecs : str\n        File path to corresponding reoriented bvecs file if outfile is a dwi.\n    \"\"\"\n    import warnings\n    warnings.filterwarnings(\"ignore\")\n    import os\n    import os.path as op\n    from pynets.registration.reg_utils import reorient_dwi, reorient_img, match_target_vox_res\n\n    outdir = op.dirname(infile)\n    img = nib.load(infile)\n    vols = img.shape[-1]\n\n    reoriented = \"%s%s%s%s\" % (outdir, '/', infile.split('/')[-1].split('.nii.gz')[0], '_pre_reor.nii.gz')\n    resampled = \"%s%s%s%s\" % (outdir, '/', os.path.basename(infile).split('.nii.gz')[0], '_pre_res.nii.gz')\n\n    # Check orientation\n    if (vols > 1) and (bvecs is not None):\n        # dwi case\n        outdir = \"%s%s\" % (outdir, '/std_dmri')\n        if not os.path.isdir(outdir):\n            os.mkdir(outdir)\n        # Check orientation\n        if not os.path.isfile(reoriented):\n            [infile, bvecs] = reorient_dwi(infile, bvecs, outdir)\n        # Check dimensions\n        if not os.path.isfile(resampled):\n            outfile = match_target_vox_res(infile, vox_size, outdir, sens='dwi')\n    elif (vols > 1) and (bvecs is None):\n        # func case\n        outdir = \"%s%s\" % (outdir, '/std_fmri')\n        if not os.path.isdir(outdir):\n            os.mkdir(outdir)\n        # Check orientation\n        if not os.path.isfile(reoriented):\n            infile = reorient_img(infile, outdir)\n        # Check dimensions\n        if not os.path.isfile(resampled):\n            outfile = match_target_vox_res(infile, vox_size, outdir, sens='func')\n    else:\n        # t1w case\n        outdir = \"%s%s\" % (outdir, '/std_anat_')\n        if not os.path.isdir(outdir):\n            os.mkdir(outdir)\n        # Check orientation\n        if not os.path.isfile(reoriented):\n            infile = reorient_img(infile, outdir)\n        if not os.path.isfile(resampled):\n            # Check dimensions\n            outfile = match_target_vox_res(infile, vox_size, outdir, sens='t1w')\n\n    print(outfile)\n\n    if bvecs is None:\n        return outfile\n    else:\n        return outfile, bvecs\n"
    ],
    [
        "infile",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/002.nii.gz",
            "9fc8ab63842c0f1a364e108b8d4dea73"
        ]
    ],
    [
        "vox_size",
        "2mm"
    ]
]