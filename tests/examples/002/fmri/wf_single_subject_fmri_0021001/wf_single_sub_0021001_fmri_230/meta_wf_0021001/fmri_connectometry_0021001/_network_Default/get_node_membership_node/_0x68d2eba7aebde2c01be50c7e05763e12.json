[('coords', array([[-39.40774665,  -9.04783285,  44.00269397],
       [ -7.43663158, -59.25827368,  37.86349474],
       [ -5.29388682,  39.69537381,   6.23667906],
       [-13.39120945, -16.23295962,  14.89086219],
       [-34.        , -34.        ,  -5.75      ],
       [-27.66990809, -59.83579899, -38.62715683],
       [-20.38812245, -47.51814791, -35.86346142],
       [-37.63897527,  42.55678958,  18.29409151],
       [-12.9633117 ,  33.74328278,  41.0403874 ],
       [-11.61810386, -18.42696522,   6.79313959],
       [-12.63600396,   9.12141444,  10.67334322],
       [-24.48445284,   1.78268339,   1.53719292],
       [-19.39536138,  -3.38457389,  -0.67475728],
       [ -1.1030303 , -10.01212121,  -1.35151515],
       [ -4.27663331, -39.44496763, -32.73866981],
       [ -6.3191898 , -27.34677842, -34.81255457],
       [-25.47759724, -22.06794682, -12.82964057],
       [-21.47991968,  -5.22188755, -18.10341365],
       [-36.20065008,   1.58607326,  -0.25890736],
       [-46.02027559,  13.76712598,  12.43307087],
       [-46.38786232,  32.45126812,   5.49402174],
       [ -9.7127572 , -81.95144033,   6.20534979],
       [ -2.06963788, -25.01671309,   9.76044568],
       [ -9.28142077,  11.34699454,  -7.08469945],
       [ -9.84567901, -15.81265432,  -9.73657407],
       [-28.        ,  -2.        ,  -8.        ],
       [-40.52919559,  32.92976725, -10.45406288],
       [ 14.35376532, -15.67192061,  15.144892  ],
       [ 25.46987952, -15.01204819, -11.63855422],
       [ -1.68587896, -47.99711816, -50.91066282],
       [ -1.74736842, -50.93684211, -26.46315789],
       [ 12.1919403 , -17.78547264,   7.17114428],
       [ 14.20635674,  10.36005693,  11.24691651],
       [ 25.62502444,   2.43147605,   1.5769306 ],
       [ 20.5507772 ,  -2.83523316,  -0.70777202],
       [ 26.30807397, -20.53450609, -12.81235904],
       [ 21.93      ,  -4.24888889, -18.41777778],
       [  9.19578313,  11.24698795,  -6.40060241],
       [-24.55775125, -62.69099855,  50.64849169],
       [ 10.77466562, -15.93674272,  -9.79040126],
       [-22.03214562, -31.49922541, -17.83152595],
       [-50.25136791, -10.39928915,  -6.63124912],
       [-53.12214603, -38.11717278,  34.63077387],
       [-44.98768633, -21.46208684,   8.45106935],
       [ -3.46808511,   2.76595745, -10.91489362],
       [  6.45205479,   3.70547945, -11.23287671],
       [ -4.46764253, -50.63995891, -13.20005136],
       [ -3.64342857, -66.68971429, -23.60742857],
       [ -4.04270938, -57.24758091, -38.75942609],
       [ -6.17316943, -25.68163193,  57.79975058],
       [-57.46055697, -27.80877621, -12.65871519],
       [  5.4625651 ,  21.54329427,  28.04296875],
       [ 37.53156103,  12.98349921,  47.44722368],
       [  9.32470444, -79.53383612,  23.1946596 ],
       [ 22.6098635 ,  -4.56230735, -31.95640687],
       [ 34.79281102, -43.04760528, -20.99951817],
       [ 46.24613187, -65.41561533,  30.40984289],
       [ 49.02416244, -28.17928934, -27.29678511],
       [  7.90322581, -44.98354839,  19.30645161],
       [ 32.80915227, -86.42231717,   2.04755712],
       [ 22.2122093 ,  36.89347337, -17.91757314],
       [ 13.6988191 , -66.42386874,  -5.03918905],
       [  5.23006135,  37.48432175, -17.26993865],
       [ 58.32844866, -25.23297708, -12.50093654],
       [ 24.10399334, -29.37895175, -18.43427621],
       [  7.53763026, -24.85488228,  58.69490544],
       [ 48.40639193,  15.13254836,  13.54583684],
       [ 42.43845252,  34.29503712, -11.10746385],
       [ 48.22581281,  32.69162562,   4.66876847],
       [ 12.23624954, -79.71576227,   7.05204873],
       [ 45.29406347, -21.88872143,  43.83195177],
       [  5.79049467, -16.93622696,  39.24515034],
       [ 41.46036719,  -7.7177768 ,  44.17087537],
       [  9.59039273, -57.63299253,  37.98847777],
       [ -5.28925825,  20.86876706,  31.68097246],
       [ 39.24827087,  43.88000643,  17.95375583],
       [ 13.54483621,  34.52466355,  38.67653984],
       [ 25.51007813, -60.26367188,  53.30015625],
       [ 51.52368964,  -6.54267157,  -8.07164795],
       [ 54.18698939, -35.04665191,  36.22738032],
       [-35.83066274,  12.09024484,  47.08011793],
       [  5.86218182,  37.532     ,   2.95709091],
       [ 46.06022409, -17.97478992,   8.11204482],
       [ 37.50006131,   2.23874923,   0.19264255],
       [ -7.08703156, -81.85428994,  21.14423077],
       [-22.87226126,  -5.03183134, -32.04257958],
       [-36.15644349, -46.70172542, -20.03937918],
       [-41.55397548, -70.55625079,  32.08886361],
       [-48.32543193, -28.42695232, -28.30117484],
       [ -6.3807937 , -46.63617086,  19.25295365],
       [-29.8504807 , -89.22470943,   1.50272636],
       [-22.22757966,  36.75416755, -17.43680101],
       [-13.29384318, -67.50893365,  -5.87891203],
       [ -5.10974742,  41.00942725, -16.83137673],
       [-43.53290192, -23.8616872 ,  43.53906128],
       [ -5.21337127, -18.39260313,  39.69630156]])), ('function_str', 'def get_node_membership(network, infile, coords, labels, parc, parcel_list, perc_overlap=0.75, error=4):\n    """\n    Evaluate the affinity of any arbitrary list of coordinate or parcel nodes for a user-specified RSN based on\n    Yeo-7 or Yeo-17 definitions.\n\n    Parameters\n    ----------\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    infile : str\n        File path to Nifti1Image object whose affine will provide sampling reference for evaluation spatial proximity.\n    coords : list\n        List of (x, y, z) tuples in mm-space corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    parcel_list : list\n        List of 3D boolean numpy arrays or binarized Nifti1Images corresponding to ROI masks.\n    perc_overlap : float\n        Value 0-1 indicating a threshold of spatial overlap to use as a spatial error cushion in the case of\n        evaluating RSN membership from a given list of parcel masks. Default is 0.75.\n    error : int\n        Rounded euclidean distance, in units of voxel number, to use as a spatial error cushion in the case of\n        evaluating RSN membership from a given list of coordinates. Default is 4.\n\n    Returns\n    -------\n    coords_mm : list\n        Filtered list of (x, y, z) tuples in mm-space with a spatial affinity for the specified RSN.\n    RSN_parcels : list\n        Filtered list of 3D boolean numpy arrays or binarized Nifti1Images corresponding to ROI masks with a spatial\n        affinity for the specified RSN.\n    net_labels : list\n        Filtered list of string labels corresponding to ROI nodes with a spatial affinity for the specified RSN.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    from nilearn.image import resample_img\n    from pynets.nodemaker import get_sphere, mmToVox, VoxTomm\n    import pkg_resources\n    import pandas as pd\n\n    # Determine whether input is from 17-networks or 7-networks\n    seven_nets = [\'Vis\', \'SomMot\', \'DorsAttn\', \'SalVentAttn\', \'Limbic\', \'Cont\', \'Default\']\n    seventeen_nets = [\'VisCent\', \'VisPeri\', \'SomMotA\', \'SomMotB\', \'DorsAttnA\', \'DorsAttnB\', \'SalVentAttnA\',\n                      \'SalVentAttnB\', \'LimbicOFC\', \'LimbicTempPole\', \'ContA\', \'ContB\', \'ContC\', \'DefaultA\', \'DefaultB\',\n                      \'DefaultC\', \'TempPar\']\n\n    # Load subject func data\n    bna_img = nib.load(infile)\n    x_vox = np.diagonal(bna_img.affine[:3, 0:3])[0]\n    y_vox = np.diagonal(bna_img.affine[:3, 0:3])[1]\n    z_vox = np.diagonal(bna_img.affine[:3, 0:3])[2]\n\n    if network in seventeen_nets:\n        if x_vox <= 1 and y_vox <= 1 and z_vox <= 1:\n            par_file = pkg_resources.resource_filename("pynets", "rsnrefs/BIGREF1mm.nii.gz")\n        else:\n            par_file = pkg_resources.resource_filename("pynets", "rsnrefs/BIGREF2mm.nii.gz")\n\n        # Grab RSN reference file\n        nets_ref_txt = pkg_resources.resource_filename("pynets", "rsnrefs/Schaefer2018_1000_17nets_ref.txt")\n    elif network in seven_nets:\n        if x_vox <= 1 and y_vox <= 1 and z_vox <= 1:\n            par_file = pkg_resources.resource_filename("pynets", "rsnrefs/SMALLREF1mm.nii.gz")\n        else:\n            par_file = pkg_resources.resource_filename("pynets", "rsnrefs/SMALLREF2mm.nii.gz")\n\n        # Grab RSN reference file\n        nets_ref_txt = pkg_resources.resource_filename("pynets", "rsnrefs/Schaefer2018_1000_7nets_ref.txt")\n    else:\n        nets_ref_txt = None\n\n    if not nets_ref_txt:\n        raise ValueError("%s%s%s" % (\'Network: \', str(network), \' not found!\\nSee valid network names using the --help \'\n                                                                \'flag with pynets_run.py\'))\n\n    # Create membership dictionary\n    dict_df = pd.read_csv(nets_ref_txt, sep="\\t", header=None, names=["Index", "Region", "X", "Y", "Z"])\n    dict_df.Region.unique().tolist()\n    ref_dict = {v: k for v, k in enumerate(dict_df.Region.unique().tolist())}\n    par_img = nib.load(par_file)\n    par_data = par_img.get_fdata()\n    RSN_ix = list(ref_dict.keys())[list(ref_dict.values()).index(network)]\n    RSNmask = par_data[:, :, :, RSN_ix]\n    bna_aff = bna_img.affine\n\n    coords_vox = []\n    for i in coords:\n        coords_vox.append(mmToVox(bna_aff, i))\n    coords_vox = list(tuple(map(lambda y: isinstance(y, float) and int(round(y, 0)), x)) for x in coords_vox)\n    if parc is False:\n        i = -1\n        RSN_parcels = None\n        RSN_coords_vox = []\n        net_labels = []\n        for coords in coords_vox:\n            sphere_vol = np.zeros(RSNmask.shape, dtype=bool)\n            sphere_vol[tuple(coords)] = 1\n            i = i + 1\n            if (RSNmask.astype(\'bool\') & sphere_vol).any():\n                print("%s%s%s%s" % (coords, \' coords falls within \', network, \'...\'))\n                RSN_coords_vox.append(coords)\n                net_labels.append(labels[i])\n                continue\n            else:\n                inds = get_sphere(coords, error, (np.abs(x_vox), y_vox, z_vox), RSNmask.shape)\n                sphere_vol[tuple(inds.T)] = 1\n                if (RSNmask.astype(\'bool\') & sphere_vol).any():\n                    print("%s%s%.2f%s%s%s" % (coords, \' coords is within a + or - \', float(error),\n                                              \' mm neighborhood of \',\n                                              network, \'...\'))\n                    RSN_coords_vox.append(coords)\n                    net_labels.append(labels[i])\n\n        coords_mm = []\n        for i in RSN_coords_vox:\n            coords_mm.append(VoxTomm(bna_aff, i))\n        coords_mm = list(set(list(tuple(x) for x in coords_mm)))\n    else:\n        i = 0\n        RSN_parcels = []\n        coords_with_parc = []\n        net_labels = []\n        for parcel in parcel_list:\n            parcel_vol = np.zeros(RSNmask.shape, dtype=bool)\n            parcel_data_reshaped = resample_img(parcel, target_affine=par_img.affine,\n                                                target_shape=RSNmask.shape).get_fdata()\n            parcel_vol[parcel_data_reshaped == 1] = 1\n\n            # Count number of unique voxels where overlap of parcel and mask occurs\n            overlap_count = len(np.unique(np.where((RSNmask.astype(\'uint8\') == 1) & (parcel_vol.astype(\'uint8\') == 1))))\n\n            # Count number of total unique voxels within the parcel\n            total_count = len(np.unique(np.where((parcel_vol.astype(\'uint8\') == 1))))\n\n            # Calculate % overlap\n            try:\n                overlap = float(overlap_count / total_count)\n            except RuntimeWarning:\n                print(\'\\nWarning: No overlap with roi mask!\\n\')\n                overlap = float(0)\n\n            if overlap >= perc_overlap:\n                print("%.2f%s%s%s%s%s" % (100 * overlap, \'% of parcel \', labels[i], \' falls within \', str(network),\n                                          \' mask...\'))\n                RSN_parcels.append(parcel)\n                coords_with_parc.append(coords[i])\n                net_labels.append(labels[i])\n            i = i + 1\n        coords_mm = list(set(list(tuple(x) for x in coords_with_parc)))\n\n    bna_img.uncache()\n    if len(coords_mm) <= 1:\n        raise ValueError("%s%s%s" % (\'\\nERROR: No coords from the specified atlas found within \', network, \' network.\'))\n\n    return coords_mm, RSN_parcels, net_labels, network\n'), ('infile', ('/usr/local/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz', 'bc1ca78c6cb89bc8a634a5e0f1339fa0')), ('labels', ['nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan']), ('network', 'Default'), ('networks_list', None), ('par_max', 96), ('parc', False), ('parcel_list', None)]