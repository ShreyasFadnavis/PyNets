[('ID', '0021001'), ('atlas', 'DesikanKlein2012'), ('binary', False), ('c_boot', 0), ('conn_matrix', array([[ 1.00000000e+00,  9.85934585e-02,  2.78947890e-01,
        -4.81935106e-02,  2.30456074e-03,  3.91249955e-01,
         1.77284554e-02, -2.82068532e-02, -2.93370634e-01,
        -4.63284925e-02, -7.49200732e-02, -2.87241390e-04,
         1.72864437e-01,  7.41519257e-02,  1.55661136e-01,
         1.53189018e-01, -3.13304141e-02,  1.38484836e-01,
        -7.08642080e-02, -2.03377545e-01,  2.10725926e-02,
         8.53452533e-02, -1.04868233e-01, -1.92561224e-02],
       [ 9.85935330e-02,  1.00000000e+00, -1.34854555e-01,
        -1.91311957e-03, -9.87252071e-02,  1.49638563e-01,
        -1.38938800e-01,  1.20703824e-01, -3.64525504e-02,
        -2.13083610e-01,  1.48372427e-01,  1.10847063e-01,
        -2.22783312e-02,  1.19889513e-01, -2.81969812e-02,
         1.91361662e-02,  2.30173603e-01,  2.77429044e-01,
        -4.98751178e-02,  2.21271366e-01,  4.09134105e-02,
         3.48898843e-02, -1.34006247e-01,  9.44997966e-02],
       [ 2.78947800e-01, -1.34854525e-01,  1.00000000e+00,
         5.40004745e-02,  3.21644731e-02,  1.09136462e-01,
         3.15061450e-01,  1.60468191e-01,  1.53392732e-01,
         1.19386137e-01, -8.22728127e-02,  2.03601390e-01,
        -1.43782616e-01, -1.74196884e-02, -8.90278965e-02,
        -5.09186238e-02,  6.55580908e-02, -4.89867218e-02,
         1.16434887e-01, -1.27951398e-01,  1.47257462e-01,
        -4.55918722e-03, -5.53526282e-02,  8.60927776e-02],
       [-4.81934957e-02, -1.91313541e-03,  5.40004820e-02,
         1.00000000e+00, -2.82737501e-02,  6.50871396e-02,
         6.12838566e-02, -1.20987751e-01,  6.63420856e-02,
         8.23715031e-02, -8.38399157e-02,  5.01140766e-02,
         9.05970037e-02,  1.01433441e-01,  7.04932734e-02,
        -4.58824448e-02,  2.19745964e-01,  1.63976654e-01,
         5.60026579e-02,  1.02169942e-02,  3.49345177e-01,
        -1.06991336e-01, -4.19632122e-02, -1.28874108e-01],
       [ 2.30459752e-03, -9.87252519e-02,  3.21645252e-02,
        -2.82737147e-02,  1.00000000e+00,  1.56542212e-01,
        -3.84935215e-02,  1.79550350e-01, -8.91878735e-03,
        -1.41312303e-02,  6.14549965e-02,  2.06407905e-02,
         1.51957944e-01,  1.37857243e-01,  1.72306076e-01,
        -3.75525877e-02, -2.60064185e-01,  3.99442852e-01,
         9.91950482e-02, -6.49313480e-02, -8.83352831e-02,
        -5.76017424e-02, -6.97079077e-02,  9.34466068e-03],
       [ 3.91250044e-01,  1.49638548e-01,  1.09136388e-01,
         6.50871769e-02,  1.56542212e-01,  1.00000000e+00,
        -8.66331309e-02, -6.25303686e-02, -3.90166626e-03,
         1.98265672e-01,  2.59432150e-03, -8.55820104e-02,
        -8.05570111e-02, -1.81652129e-01, -1.41930073e-01,
         6.60002744e-03, -4.26381221e-03, -4.14001793e-02,
        -2.89945602e-02,  2.21505836e-01, -2.81798765e-02,
         9.07873064e-02,  8.88037905e-02,  1.08884715e-01],
       [ 1.77284870e-02, -1.38938785e-01,  3.15061629e-01,
         6.12839609e-02, -3.84934470e-02, -8.66332278e-02,
         1.00000000e+00,  1.95135847e-01, -5.12749441e-02,
         4.40958180e-02,  1.09806202e-01,  2.88385004e-01,
        -5.57204150e-02, -3.68736573e-02,  1.65233001e-01,
         1.30488694e-01,  3.58430184e-02, -2.03029156e-01,
         1.34774065e-03,  2.54143089e-01,  9.89528224e-02,
        -7.58556798e-02, -6.49389327e-02,  7.93260410e-02],
       [-2.82068010e-02,  1.20703712e-01,  1.60468027e-01,
        -1.20987698e-01,  1.79550245e-01, -6.25304058e-02,
         1.95135742e-01,  1.00000000e+00,  7.09594712e-02,
         6.45228475e-02, -4.52979989e-02, -7.24954829e-02,
        -9.84639525e-02,  1.09817147e-01,  2.47446314e-01,
         1.19195003e-02, -1.10650405e-01,  6.33818805e-02,
        -1.38196930e-01,  2.40843982e-01,  8.72783363e-02,
         1.85303107e-01,  1.78272519e-02, -1.36008516e-01],
       [-2.93370485e-01, -3.64526324e-02,  1.53392762e-01,
         6.63420781e-02, -8.91884696e-03, -3.90164927e-03,
        -5.12751341e-02,  7.09595457e-02,  1.00000000e+00,
         1.49635047e-01,  1.01801734e-02,  1.85280129e-01,
         1.43519416e-01, -1.47424072e-01,  1.17793091e-01,
         4.03607031e-03, -2.61004511e-02,  3.73244174e-02,
         4.44281362e-02,  3.57112437e-02, -2.79107783e-02,
         5.47877967e-01,  1.63783625e-01,  9.54209343e-02],
       [-4.63284627e-02, -2.13083595e-01,  1.19386122e-01,
         8.23713988e-02, -1.41312266e-02,  1.98265687e-01,
         4.40958291e-02,  6.45227134e-02,  1.49635062e-01,
         1.00000000e+00,  6.10000603e-02, -8.34827945e-02,
         1.57730177e-01,  4.09801632e-01,  1.44678831e-01,
         8.21616128e-02, -7.31210113e-02, -1.85962856e-01,
        -8.33873078e-03,  2.25950047e-01, -5.31116687e-03,
        -1.40610352e-01, -2.18350720e-02,  2.43033152e-02],
       [-7.49201179e-02,  1.48372412e-01, -8.22727829e-02,
        -8.38399231e-02,  6.14549443e-02,  2.59432755e-03,
         1.09806120e-01, -4.52980064e-02,  1.01799667e-02,
         6.10001311e-02,  1.00000000e+00,  1.67389631e-01,
         3.66515405e-02, -6.20923452e-02,  8.45994651e-02,
         6.17322586e-02, -8.77464097e-03,  2.27137003e-03,
         3.36838304e-03, -3.45879458e-02,  4.53494154e-02,
         3.36632401e-01,  3.03931581e-03,  1.37563318e-01],
       [-2.87291594e-04,  1.10847108e-01,  2.03601271e-01,
         5.01140282e-02,  2.06408128e-02, -8.55819955e-02,
         2.88385212e-01, -7.24955723e-02,  1.85279936e-01,
        -8.34827796e-02,  1.67389512e-01,  1.00000000e+00,
        -7.25798542e-03,  2.03859895e-01, -2.19330620e-02,
         4.13620062e-02,  1.02530181e-01, -5.41124716e-02,
         5.56493104e-02,  6.28441852e-03,  7.22843558e-02,
        -9.77558121e-02, -5.45843318e-03, -1.02470718e-01],
       [ 1.72864437e-01, -2.22782902e-02, -1.43782601e-01,
         9.05970633e-02,  1.51957974e-01, -8.05570111e-02,
        -5.57203889e-02, -9.84639153e-02,  1.43519431e-01,
         1.57730177e-01,  3.66515629e-02, -7.25806411e-03,
         1.00000000e+00,  2.65461206e-01,  5.41787632e-02,
        -2.35336050e-02,  1.66402742e-01, -5.67240361e-03,
         1.65738657e-01,  8.49895626e-02,  1.22486629e-01,
        -1.12391241e-01, -1.98068991e-01, -5.60260899e-02],
       [ 7.41519406e-02,  1.19889490e-01, -1.74196996e-02,
         1.01433493e-01,  1.37857243e-01, -1.81652129e-01,
        -3.68736908e-02,  1.09817214e-01, -1.47424057e-01,
         4.09801513e-01, -6.20923266e-02,  2.03859940e-01,
         2.65461206e-01,  1.00000000e+00, -8.73960331e-02,
        -2.08246902e-01, -1.60853639e-01, -1.13825209e-01,
        -9.13369060e-02, -1.28164053e-01, -8.83670077e-02,
         1.19172364e-01,  1.95543095e-01,  1.43789470e-01],
       [ 1.55661091e-01, -2.81969588e-02, -8.90279114e-02,
         7.04931840e-02,  1.72306135e-01, -1.41930029e-01,
         1.65233180e-01,  2.47446299e-01,  1.17792957e-01,
         1.44678861e-01,  8.45993906e-02, -2.19330452e-02,
         5.41787855e-02, -8.73960629e-02,  1.00000000e+00,
        -8.38633627e-02,  2.62258232e-01,  1.29522681e-01,
        -2.14203391e-02, -2.36410741e-03, -1.03323549e-01,
         1.27959922e-01,  2.04546191e-02, -5.28685690e-04],
       [ 1.53189078e-01,  1.91361792e-02, -5.09186350e-02,
        -4.58824411e-02, -3.75525765e-02,  6.60001067e-03,
         1.30488634e-01,  1.19194947e-02,  4.03614622e-03,
         8.21615756e-02,  6.17322400e-02,  4.13620137e-02,
        -2.35336274e-02, -2.08246931e-01, -8.38633478e-02,
         1.00000000e+00, -1.02967672e-01,  7.61788487e-02,
         3.48232210e-01, -4.09621978e-03, -1.92401595e-02,
         4.04994339e-02,  8.17079917e-02,  1.20373793e-01],
       [-3.13304029e-02,  2.30173424e-01,  6.55581132e-02,
         2.19745979e-01, -2.60064185e-01, -4.26380709e-03,
         3.58429998e-02, -1.10650405e-01, -2.61004306e-02,
        -7.31210262e-02, -8.77461769e-03,  1.02530174e-01,
         1.66402757e-01, -1.60853639e-01,  2.62258112e-01,
        -1.02967694e-01,  1.00000000e+00,  2.03797758e-01,
        -5.65579683e-02,  2.53496081e-01, -1.01265110e-01,
         6.32909983e-02,  3.81200500e-02, -1.88806467e-02],
       [ 1.38484791e-01,  2.77429193e-01, -4.89867292e-02,
         1.63976654e-01,  3.99442852e-01, -4.14001606e-02,
        -2.03029096e-01,  6.33818507e-02,  3.73244844e-02,
        -1.85962886e-01,  2.27133860e-03, -5.41125052e-02,
        -5.67235937e-03, -1.13825195e-01,  1.29522666e-01,
         7.61789531e-02,  2.03797683e-01,  1.00000000e+00,
         1.43321380e-01,  1.41134793e-02,  8.19668099e-02,
        -1.26833260e-01,  8.91934410e-02,  2.25055188e-01],
       [-7.08641782e-02, -4.98752072e-02,  1.16434827e-01,
         5.60026765e-02,  9.91950706e-02, -2.89945789e-02,
         1.34782086e-03, -1.38196930e-01,  4.44280952e-02,
        -8.33869446e-03,  3.36836139e-03,  5.56493290e-02,
         1.65738642e-01, -9.13369283e-02, -2.14203838e-02,
         3.48232210e-01, -5.65578826e-02,  1.43321484e-01,
         1.00000000e+00,  2.50844806e-01,  1.15405701e-01,
         7.43931606e-02,  2.41554976e-01,  1.11007527e-01],
       [-2.03377590e-01,  2.21271425e-01, -1.27951279e-01,
         1.02170343e-02, -6.49314597e-02,  2.21505865e-01,
         2.54143000e-01,  2.40843952e-01,  3.57112847e-02,
         2.25949958e-01, -3.45879495e-02,  6.28443062e-03,
         8.49895477e-02, -1.28163978e-01, -2.36401847e-03,
        -4.09621513e-03,  2.53495961e-01,  1.41135724e-02,
         2.50844777e-01,  1.00000000e+00, -8.67718831e-02,
        -1.63896918e-01,  4.50722128e-02, -1.76392183e-01],
       [ 2.10725889e-02,  4.09134068e-02,  1.47257537e-01,
         3.49345148e-01, -8.83352980e-02, -2.81798560e-02,
         9.89528298e-02,  8.72783735e-02, -2.79108118e-02,
        -5.31121530e-03,  4.53494154e-02,  7.22843856e-02,
         1.22486651e-01, -8.83669928e-02, -1.03323542e-01,
        -1.92402098e-02, -1.01265118e-01,  8.19667876e-02,
         1.15405791e-01, -8.67718905e-02,  1.00000000e+00,
         1.39577135e-01,  1.72894646e-03,  7.68448934e-02],
       [ 8.53452459e-02,  3.48899849e-02, -4.55919327e-03,
        -1.06991298e-01, -5.76017015e-02,  9.07872766e-02,
        -7.58555904e-02,  1.85303003e-01,  5.47878265e-01,
        -1.40610442e-01,  3.36632252e-01, -9.77559686e-02,
        -1.12391241e-01,  1.19172424e-01,  1.27959892e-01,
         4.04995047e-02,  6.32909685e-02, -1.26833260e-01,
         7.43930563e-02, -1.63896888e-01,  1.39577150e-01,
         1.00000000e+00, -1.44269273e-01, -1.64877139e-02],
       [-1.04868248e-01, -1.34006262e-01, -5.53526096e-02,
        -4.19631787e-02, -6.97078705e-02,  8.88037756e-02,
        -6.49389625e-02,  1.78272761e-02,  1.63783669e-01,
        -2.18350831e-02,  3.03930230e-03, -5.45845833e-03,
        -1.98068976e-01,  1.95543081e-01,  2.04546079e-02,
         8.17079842e-02,  3.81200314e-02,  8.91933441e-02,
         2.41554976e-01,  4.50722687e-02,  1.72895030e-03,
        -1.44269273e-01,  1.00000000e+00,  2.32524291e-01],
       [-1.92561261e-02,  9.44997743e-02,  8.60928446e-02,
        -1.28874138e-01,  9.34457127e-03,  1.08884677e-01,
         7.93260410e-02, -1.36008546e-01,  9.54209343e-02,
         2.43033543e-02,  1.37563333e-01, -1.02470770e-01,
        -5.60260937e-02,  1.43789500e-01, -5.28713397e-04,
         1.20373778e-01, -1.88806728e-02,  2.25055337e-01,
         1.11007504e-01, -1.76392138e-01,  7.68449008e-02,
        -1.64877232e-02,  2.32524171e-01,  1.00000000e+00]], dtype=float32)), ('conn_model', 'partcorr'), ('coords', array([[-40.,  32., -10.],
       [ 46., -66.,  30.],
       [ 52.,  -6.,  -8.],
       [-12.,  34.,  42.],
       [-36.,  12.,  48.],
       [ 42.,  34., -12.],
       [-50., -10.,  -6.],
       [ 10., -58.,  38.],
       [  8., -44.,  20.],
       [ 48.,  32.,   4.],
       [  6., -16.,  40.],
       [ -6., -18.,  40.],
       [-46.,  14.,  12.],
       [-46.,  32.,   6.],
       [ -8., -60.,  38.],
       [-22., -32., -18.],
       [-58., -28., -12.],
       [-42., -70.,  32.],
       [ -6.,  40.,   6.],
       [ 58., -26., -12.],
       [  6.,  38.,   2.],
       [ -6., -46.,  20.],
       [  6.,  38., -18.],
       [ -6.,  42., -16.]])), ('dens_thresh', True), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012'), ('disp_filt', False), ('function_str', 'def thresh_func(dens_thresh, thr, conn_matrix, conn_model, network, ID, dir_path, roi, node_size, min_span_tree,\n                smooth, disp_filt, parc, prune, atlas, uatlas, labels, coords, c_boot, norm, binary,\n                hpass):\n    """\n    Threshold a functional connectivity matrix using any of a variety of methods.\n\n    Parameters\n    ----------\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    thr : float\n        A value, between 0 and 1, to threshold the graph using any variety of methods\n        triggered through other options.\n    conn_matrix : array\n        Adjacency matrix stored as an m x n array of nodes and edges.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        \'backbone network\' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n\n    Returns\n    -------\n    conn_matrix_thr : array\n        Weighted, thresholded, NxN matrix.\n    edge_threshold : str\n        The string percentage representation of thr.\n    est_path : str\n        File path to the thresholded graph, conn_matrix_thr, saved as a numpy array in .npy format.\n    thr : float\n        The value, between 0 and 1, used to threshold the graph using any variety of methods\n        triggered through other options.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    from pynets import utils, thresholding\n\n    thr_perc = 100 * float(thr)\n    edge_threshold = "%s%s" % (str(thr_perc), \'%\')\n    if parc is True:\n        node_size = \'parc\'\n\n    if np.count_nonzero(conn_matrix) == 0:\n        raise ValueError(\'ERROR: Raw connectivity matrix contains only zeros.\')\n\n    # Save unthresholded\n    unthr_path = utils.create_unthr_path(ID, network, conn_model, roi, dir_path)\n    utils.save_mat(conn_matrix, unthr_path)\n\n    if min_span_tree is True:\n        print(\'Using local thresholding option with the Minimum Spanning Tree (MST)...\\n\')\n        if dens_thresh is False:\n            thr_type = \'MSTprop\'\n            conn_matrix_thr = thresholding.local_thresholding_prop(conn_matrix, thr)\n        else:\n            thr_type = \'MSTdens\'\n            conn_matrix_thr = thresholding.local_thresholding_dens(conn_matrix, thr)\n    elif disp_filt is True:\n        thr_type = \'DISP_alpha\'\n        G1 = thresholding.disparity_filter(nx.from_numpy_array(conn_matrix))\n        # G2 = nx.Graph([(u, v, d) for u, v, d in G1.edges(data=True) if d[\'alpha\'] < thr])\n        print(\'Computing edge disparity significance with alpha = %s\' % thr)\n        print(\'Filtered graph: nodes = %s, edges = %s\' % (G1.number_of_nodes(), G1.number_of_edges()))\n        # print(\'Backbone graph: nodes = %s, edges = %s\' % (G2.number_of_nodes(), G2.number_of_edges()))\n        # print(G2.edges(data=True))\n        conn_matrix_thr = nx.to_numpy_array(G1)\n    else:\n        if dens_thresh is False:\n            thr_type = \'prop\'\n            print("%s%.2f%s" % (\'\\nThresholding proportionally at: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.threshold_proportional(conn_matrix, float(thr))\n        else:\n            thr_type = \'dens\'\n            print("%s%.2f%s" % (\'\\nThresholding to achieve density of: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.density_thresholding(conn_matrix, float(thr))\n\n    if not nx.is_connected(nx.from_numpy_matrix(conn_matrix_thr)):\n        print(\'Warning: Fragmented graph\')\n\n    # Save thresholded mat\n    est_path = utils.create_est_path_func(ID, network, conn_model, thr, roi, dir_path, node_size, smooth, c_boot,\n                                          thr_type, hpass, parc)\n\n    utils.save_mat(conn_matrix_thr, est_path)\n\n    return conn_matrix_thr, edge_threshold, est_path, thr, node_size, network, conn_model, roi, smooth, prune, ID, dir_path, atlas, uatlas, labels, coords, c_boot, norm, binary, hpass\n'), ('hpass', None), ('labels', array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
       nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan])), ('min_span_tree', False), ('network', 'Default'), ('node_size', 4), ('norm', 0), ('parc', False), ('prune', '1'), ('roi', None), ('smooth', 0), ('thr', '0.16'), ('uatlas', ('/Users/derekpisner/Applications/PyNets/pynets/atlases/DesikanKlein2012.nii.gz', '8b05327694ff8612e04249dae9d49822'))]