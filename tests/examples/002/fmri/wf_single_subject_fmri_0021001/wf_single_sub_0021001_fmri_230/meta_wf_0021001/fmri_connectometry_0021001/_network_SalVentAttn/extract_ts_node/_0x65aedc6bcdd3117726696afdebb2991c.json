[
    [
        "ID",
        "0021001"
    ],
    [
        "atlas",
        "DesikanKlein2012"
    ],
    [
        "block_size",
        null
    ],
    [
        "c_boot",
        0
    ],
    [
        "conf",
        null
    ],
    [
        "coords",
        [
            [
                "-40.0000000000",
                "32.0000000000",
                "-10.0000000000"
            ],
            [
                "-54.0000000000",
                "-38.0000000000",
                "34.0000000000"
            ],
            [
                "6.0000000000",
                "22.0000000000",
                "28.0000000000"
            ],
            [
                "-50.0000000000",
                "-10.0000000000",
                "-6.0000000000"
            ],
            [
                "48.0000000000",
                "16.0000000000",
                "14.0000000000"
            ],
            [
                "52.0000000000",
                "-6.0000000000",
                "-8.0000000000"
            ],
            [
                "48.0000000000",
                "32.0000000000",
                "4.0000000000"
            ],
            [
                "38.0000000000",
                "2.0000000000",
                "0.0000000000"
            ],
            [
                "6.0000000000",
                "-16.0000000000",
                "40.0000000000"
            ],
            [
                "54.0000000000",
                "-36.0000000000",
                "36.0000000000"
            ],
            [
                "-6.0000000000",
                "-18.0000000000",
                "40.0000000000"
            ],
            [
                "-6.0000000000",
                "20.0000000000",
                "32.0000000000"
            ],
            [
                "-36.0000000000",
                "2.0000000000",
                "0.0000000000"
            ]
        ]
    ],
    [
        "dir_path",
        "/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012"
    ],
    [
        "func_file",
        [
            "/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/002.nii.gz",
            "005b0b364c2405e065bb0db2b59aaba3"
        ]
    ],
    [
        "function_str",
        "def extract_ts_coords(node_size, conf, func_file, coords, dir_path, ID, roi, network, smooth, atlas,\n                      uatlas, labels, c_boot, block_size, hpass, detrending=True):\n    \"\"\"\n    API for employing Nilearn's NiftiSpheresMasker to extract fMRI time-series data from spherical ROI's based on a\n    given list of seed coordinates. The resulting time-series can then optionally be resampled using circular-block\n    bootrapping. The final 2D m x n array is ultimately saved to file in .npy format\n\n    Parameters\n    ----------\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI's for tracking.\n    conf : str\n        File path to a confound regressor file for reduce noise in the time-series when extracting from ROI's.\n    func_file : str\n        File path to a preprocessed functional Nifti1Image in standard space.\n    coords : list\n        List of (x, y, z) tuples corresponding to an a-priori defined set (e.g. a coordinate atlas).\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    ID : str\n        A subject id or other unique identifier.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. 'Default')\n        used to filter nodes in the study of brain subgraphs.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI's.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to graph nodes.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    block_size : int\n        Size bootstrap blocks if bootstrapping (c_boot) is performed.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    detrending : bool\n        Indicates whether to remove linear trends from time-series when extracting across nodes. Default is True.\n\n    Returns\n    -------\n    ts_within_nodes : array\n        2D m x n array consisting of the time-series signal for each ROI node where m = number of scans and\n        n = number of ROI's, where ROI's are spheres.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI's for tracking.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI's.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    \"\"\"\n    import warnings\n    warnings.filterwarnings(\"ignore\")\n    import os.path as op\n    from nilearn import input_data\n    from pynets import utils\n\n    if not op.isfile(func_file):\n        raise ValueError('\\nERROR: Functional data input not found! Check that the file(s) specified with the -i flag '\n                         'exist(s)')\n\n    if conf:\n        if not op.isfile(conf):\n            raise ValueError('\\nERROR: Confound regressor file not found! Check that the file(s) specified with the '\n                             '-conf flag exist(s)')\n\n    if len(coords) > 0:\n        spheres_masker = input_data.NiftiSpheresMasker(seeds=coords, radius=float(node_size), allow_overlap=True,\n                                                       standardize=True, smoothing_fwhm=float(smooth), high_pass=hpass,\n                                                       detrend=detrending, verbose=2)\n        ts_within_nodes = spheres_masker.fit_transform(func_file, confounds=conf)\n        if float(c_boot) > 0:\n            print(\"%s%s%s\" % ('Performing circular block bootstrapping iteration: ', c_boot, '...'))\n            ts_within_nodes = utils.timeseries_bootstrap(ts_within_nodes, block_size)[0]\n        if ts_within_nodes is None:\n            raise RuntimeError('\\nERROR: Time-series extraction failed!')\n    else:\n        raise RuntimeError(\n            '\\nERROR: Cannot extract time-series from an empty list of coordinates. \\nThis usually means '\n            'that no nodes were generated based on the specified conditions at runtime (e.g. atlas was '\n            'overly restricted by an RSN or some user-defined mask.')\n\n    print(\"%s%s%d%s\" % ('\\nTime series has {0} samples'.format(ts_within_nodes.shape[0]), ' mean extracted from ',\n                        len(coords), ' coordinate ROI\\'s'))\n    print(\"%s%s%s\" % ('Using node radius: ', node_size, ' mm'))\n    print(\"%s%s%s\" % ('Smoothing FWHM: ', smooth, ' mm\\n'))\n    print(\"%s%s%s\" % ('Applying high-pass filter: ', hpass, ' Hz\\n'))\n\n    # Save time series as txt file\n    utils.save_ts_to_file(roi, network, ID, dir_path, ts_within_nodes, c_boot)\n    return ts_within_nodes, node_size, smooth, dir_path, atlas, uatlas, labels, coords, c_boot, hpass\n"
    ],
    [
        "hpass",
        null
    ],
    [
        "labels",
        [
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan",
            "nan"
        ]
    ],
    [
        "net_parcels_map_nifti",
        null
    ],
    [
        "network",
        "SalVentAttn"
    ],
    [
        "node_size",
        4
    ],
    [
        "roi",
        null
    ],
    [
        "smooth",
        0
    ],
    [
        "uatlas",
        [
            "/Users/derekpisner/Applications/PyNets/pynets/atlases/DesikanKlein2012.nii.gz",
            "8b05327694ff8612e04249dae9d49822"
        ]
    ]
]