[('ID', '0021001'), ('atlas', 'DesikanKlein2012'), ('binary', False), ('c_boot', 0), ('conn_matrix', array([[ 1.        ,  0.06227798,  0.32326457,  0.24302655,  0.1213804 ,
        -0.03188517,  0.02481395,  0.08537625,  0.68171847, -0.23114818,
        -0.04812953, -0.00315837,  0.00359861, -0.06957115,  0.08596162],
       [ 0.06227799,  1.        , -0.03717826,  0.21330476,  0.4097675 ,
         0.07464918,  0.01839136,  0.06352065,  0.00713484,  0.71727407,
        -0.08799863, -0.12721597, -0.15059516, -0.04714928, -0.16797777],
       [ 0.32326448, -0.03717822,  1.        , -0.07031117,  0.06356345,
         0.05054064, -0.02079634,  0.17908119, -0.33067957,  0.06457541,
         0.3399143 ,  0.00969351,  0.09130301, -0.07294445, -0.11511344],
       [ 0.24302636,  0.21330501, -0.07031115,  1.        ,  0.0451672 ,
         0.13451321, -0.03349867,  0.02670339, -0.00551622,  0.04545967,
         0.03391681,  0.61090386,  0.09749731, -0.10408276, -0.08069981],
       [ 0.12138028,  0.40976748,  0.06356354,  0.04516723,  1.        ,
         0.12676506, -0.14194371,  0.11451716, -0.09215576,  0.03808055,
        -0.01994531, -0.29664618,  0.3554389 ,  0.01351115,  0.05419266],
       [-0.0318849 ,  0.07464919,  0.0505405 ,  0.13451295,  0.12676518,
         1.        ,  0.22502723,  0.14174527, -0.04452883, -0.03213083,
        -0.15994282, -0.06350772,  0.03730256,  0.70516825,  0.20095474],
       [ 0.0248138 ,  0.01839143, -0.02079621, -0.03349868, -0.1419438 ,
         0.22502758,  1.        ,  0.4031862 , -0.06000669,  0.16925149,
         0.32316646, -0.03201042,  0.01140793, -0.12993984, -0.1426678 ],
       [ 0.08537645,  0.06352062,  0.17908107,  0.02670343,  0.11451707,
         0.14174512,  0.40318626,  1.        ,  0.04785818, -0.26522976,
        -0.04252403, -0.01489377, -0.11166585, -0.05001271,  0.42754248],
       [ 0.6817187 ,  0.00713485, -0.3306797 , -0.0055164 , -0.09215587,
        -0.04452864, -0.06000687,  0.04785844,  1.        , -0.00531833,
         0.02699951,  0.2194518 ,  0.1242663 ,  0.04461207,  0.20582199],
       [-0.2311482 ,  0.7172742 ,  0.06457546,  0.04546003,  0.03808057,
        -0.03213101,  0.16925162, -0.2652299 , -0.00531844,  1.        ,
         0.0783936 ,  0.23674992,  0.08400593,  0.00255005,  0.23803   ],
       [-0.04812938, -0.0879988 ,  0.33991432,  0.03391672, -0.01994522,
        -0.15994297,  0.32316652, -0.0425241 ,  0.02699943,  0.07839379,
         1.        , -0.06844413,  0.28218624,  0.2452839 ,  0.23289578],
       [-0.00315846, -0.12721612,  0.00969351,  0.6109037 , -0.2966461 ,
        -0.06350784, -0.03201044, -0.01489367,  0.21945184,  0.23675016,
        -0.06844414,  1.        ,  0.22487392,  0.07656612, -0.01048326],
       [ 0.00359871, -0.15059502,  0.09130294,  0.09749725,  0.35543883,
         0.03730264,  0.01140788, -0.11166581,  0.12426615,  0.08400585,
         0.28218624,  0.22487396,  1.        ,  0.09178919, -0.2320783 ],
       [-0.06957128, -0.04714925, -0.07294433, -0.10408259,  0.01351099,
         0.70516807, -0.12993957, -0.05001294,  0.04461206,  0.00254996,
         0.24528377,  0.07656607,  0.09178921,  1.        ,  0.17361528],
       [ 0.08596125, -0.16797762, -0.11511334, -0.08069976,  0.0541926 ,
         0.20095505, -0.14266779,  0.4275425 ,  0.20582238,  0.23802973,
         0.23289578, -0.01048324, -0.23207825,  0.17361492,  1.        ]],
      dtype=float32)), ('conn_model', 'partcorr'), ('coords', array([[ 54.18698939, -35.04665191,  36.22738032],
       [-13.29384318, -67.50893365,  -5.87891203],
       [  7.53763026, -24.85488228,  58.69490544],
       [ -5.21337127, -18.39260313,  39.69630156],
       [ 22.6098635 ,  -4.56230735, -31.95640687],
       [-29.8504807 , -89.22470943,   1.50272636],
       [ -6.17316943, -25.68163193,  57.79975058],
       [ 20.5507772 ,  -2.83523316,  -0.70777202],
       [ -4.04270938, -57.24758091, -38.75942609],
       [  5.23006135,  37.48432175, -17.26993865],
       [ 24.10399334, -29.37895175, -18.43427621],
       [-22.87226126,  -5.03183134, -32.04257958],
       [ 34.79281102, -43.04760528, -20.99951817],
       [-35.83066274,  12.09024484,  47.08011793],
       [ 13.6988191 , -66.42386874,  -5.03918905]])), ('dens_thresh', True), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012'), ('disp_filt', False), ('function_str', 'def thresh_func(dens_thresh, thr, conn_matrix, conn_model, network, ID, dir_path, roi, node_size, min_span_tree,\n                smooth, disp_filt, parc, prune, atlas, uatlas, labels, coords, c_boot, norm, binary,\n                hpass):\n    """\n    Threshold a functional connectivity matrix using any of a variety of methods.\n\n    Parameters\n    ----------\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    thr : float\n        A value, between 0 and 1, to threshold the graph using any variety of methods\n        triggered through other options.\n    conn_matrix : array\n        Adjacency matrix stored as an m x n array of nodes and edges.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        \'backbone network\' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n\n    Returns\n    -------\n    conn_matrix_thr : array\n        Weighted, thresholded, NxN matrix.\n    edge_threshold : str\n        The string percentage representation of thr.\n    est_path : str\n        File path to the thresholded graph, conn_matrix_thr, saved as a numpy array in .npy format.\n    thr : float\n        The value, between 0 and 1, used to threshold the graph using any variety of methods\n        triggered through other options.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    from pynets import utils, thresholding\n\n    thr_perc = 100 * float(thr)\n    edge_threshold = "%s%s" % (str(thr_perc), \'%\')\n    if parc is True:\n        node_size = \'parc\'\n\n    if np.count_nonzero(conn_matrix) == 0:\n        raise ValueError(\'ERROR: Raw connectivity matrix contains only zeros.\')\n\n    # Save unthresholded\n    unthr_path = utils.create_unthr_path(ID, network, conn_model, roi, dir_path)\n    utils.save_mat(conn_matrix, unthr_path)\n\n    if min_span_tree is True:\n        print(\'Using local thresholding option with the Minimum Spanning Tree (MST)...\\n\')\n        if dens_thresh is False:\n            thr_type = \'MSTprop\'\n            conn_matrix_thr = thresholding.local_thresholding_prop(conn_matrix, thr)\n        else:\n            thr_type = \'MSTdens\'\n            conn_matrix_thr = thresholding.local_thresholding_dens(conn_matrix, thr)\n    elif disp_filt is True:\n        thr_type = \'DISP_alpha\'\n        G1 = thresholding.disparity_filter(nx.from_numpy_array(conn_matrix))\n        # G2 = nx.Graph([(u, v, d) for u, v, d in G1.edges(data=True) if d[\'alpha\'] < thr])\n        print(\'Computing edge disparity significance with alpha = %s\' % thr)\n        print(\'Filtered graph: nodes = %s, edges = %s\' % (G1.number_of_nodes(), G1.number_of_edges()))\n        # print(\'Backbone graph: nodes = %s, edges = %s\' % (G2.number_of_nodes(), G2.number_of_edges()))\n        # print(G2.edges(data=True))\n        conn_matrix_thr = nx.to_numpy_array(G1)\n    else:\n        if dens_thresh is False:\n            thr_type = \'prop\'\n            print("%s%.2f%s" % (\'\\nThresholding proportionally at: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.threshold_proportional(conn_matrix, float(thr))\n        else:\n            thr_type = \'dens\'\n            print("%s%.2f%s" % (\'\\nThresholding to achieve density of: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.density_thresholding(conn_matrix, float(thr))\n\n    if not nx.is_connected(nx.from_numpy_matrix(conn_matrix_thr)):\n        print(\'Warning: Fragmented graph\')\n\n    # Save thresholded mat\n    est_path = utils.create_est_path_func(ID, network, conn_model, thr, roi, dir_path, node_size, smooth, c_boot,\n                                          thr_type, hpass, parc)\n\n    utils.save_mat(conn_matrix_thr, est_path)\n\n    return conn_matrix_thr, edge_threshold, est_path, thr, node_size, network, conn_model, roi, smooth, prune, ID, dir_path, atlas, uatlas, labels, coords, c_boot, norm, binary, hpass\n'), ('hpass', None), ('labels', array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
       nan, nan])), ('min_span_tree', False), ('network', 'SalVentAttn'), ('node_size', None), ('norm', 0), ('parc', True), ('prune', '1'), ('roi', None), ('smooth', 0), ('thr', '0.19'), ('uatlas', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/reg_fmri/anat_reg/DesikanKlein2012_t1w_mni_gm.nii.gz')]