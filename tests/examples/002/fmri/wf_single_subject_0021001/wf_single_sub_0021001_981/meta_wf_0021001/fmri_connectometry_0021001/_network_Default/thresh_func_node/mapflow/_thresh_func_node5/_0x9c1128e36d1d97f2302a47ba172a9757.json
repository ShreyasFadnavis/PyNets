[('ID', '0021001'), ('atlas', 'DesikanKlein2012'), ('binary', False), ('c_boot', 0), ('conn_matrix', array([[-2.03920632,  0.43106068,  0.        ,  0.04314351,  0.        ,
         0.34331076,  0.        ,  0.11852957,  0.        ,  0.27650819,
         0.        ,  0.27466575,  0.33295579,  0.        ,  0.1678271 ,
         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.08714262,  0.        ],
       [ 0.43106068, -1.90721664,  0.08157102,  0.1524147 ,  0.        ,
         0.        ,  0.09456576,  0.        ,  0.        ,  0.        ,
         0.35764581,  0.        ,  0.        , -0.        ,  0.62555077,
         0.        ,  0.        ,  0.        , -0.        ,  0.        ,
         0.        , -0.        ],
       [ 0.        ,  0.08157102, -2.6235266 ,  0.        ,  0.24954536,
         0.        , -0.        , -0.        ,  0.16966884,  0.36461715,
         0.12429774,  0.        ,  0.22961303,  0.        ,  0.        ,
         1.1801045 ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.20584319,  0.        ],
       [ 0.04314351,  0.1524147 ,  0.        , -2.12180543,  0.04785933,
         0.27631466, -0.        ,  0.        ,  0.        ,  0.        ,
         0.        , -0.        ,  0.29708672,  0.11319843,  0.        ,
         0.05034257,  0.99336033,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.24954536,  0.04785933, -1.45376112,
         0.        ,  0.        , -0.        ,  0.13698582,  0.        ,
         0.30156113,  0.        ,  0.15918825,  0.01157989,  0.        ,
         0.        ,  0.13988837,  0.        , -0.        ,  0.        ,
         0.        ,  0.        ],
       [ 0.34331076,  0.        ,  0.        ,  0.27631466,  0.        ,
        -1.59645067,  0.15177792,  0.46713137,  0.        ,  0.        ,
         0.        , -0.        ,  0.09509693,  0.03771282,  0.        ,
         0.        ,  0.        ,  0.01062495,  0.        , -0.        ,
         0.        ,  0.        ],
       [ 0.        ,  0.09456576, -0.        , -0.        ,  0.        ,
         0.15177792, -1.4022526 ,  0.24950514,  0.        , -0.        ,
         0.14602717,  0.10670883,  0.        ,  0.        ,  0.        ,
        -0.06505858, -0.        ,  0.41900489, -0.        ,  0.        ,
         0.        , -0.        ],
       [ 0.11852957,  0.        , -0.        ,  0.        , -0.        ,
         0.46713137,  0.24950514, -1.41193867,  0.        ,  0.        ,
        -0.        ,  0.13633707, -0.        ,  0.        ,  0.        ,
        -0.        , -0.        ,  0.        ,  0.0859003 , -0.        ,
        -0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.16966884,  0.        ,  0.13698582,
         0.        ,  0.        ,  0.        , -2.25602445,  0.39560309,
         0.        ,  0.34308124,  0.09813521,  0.26806568,  0.14320498,
         0.        ,  0.        ,  0.        ,  0.        ,  0.31470402,
         0.44714846,  0.        ],
       [ 0.27650819,  0.        ,  0.36461715,  0.        ,  0.        ,
         0.        , -0.        ,  0.        ,  0.39560309, -2.18434909,
         0.        ,  0.10287198,  0.07344866,  0.20669372,  0.15651802,
         0.23811878,  0.        ,  0.        ,  0.05597093,  0.        ,
         0.23560921,  0.05200272],
       [ 0.        ,  0.35764581,  0.12429774,  0.        ,  0.30156113,
         0.        ,  0.14602717, -0.        ,  0.        ,  0.        ,
        -1.99946037,  0.        ,  0.42285018,  0.        ,  0.        ,
         0.        ,  0.        ,  0.08907438,  0.        ,  0.56075635,
         0.        ,  0.        ],
       [ 0.27466575,  0.        ,  0.        , -0.        ,  0.        ,
        -0.        ,  0.10670883,  0.13633707,  0.34308124,  0.10287198,
         0.        , -1.46762918,  0.        ,  0.        ,  0.07562668,
         0.        , -0.        ,  0.        ,  0.        ,  0.11816121,
         0.        ,  0.        ],
       [ 0.33295579,  0.        ,  0.22961303,  0.29708672,  0.15918825,
         0.09509693,  0.        , -0.        ,  0.09813521,  0.07344866,
         0.42285018,  0.        , -2.73769541,  0.05341289,  0.        ,
         0.00554857,  0.03686225,  0.        ,  0.        ,  0.        ,
         1.04496486,  0.        ],
       [ 0.        , -0.        ,  0.        ,  0.11319843,  0.01157989,
         0.03771282,  0.        ,  0.        ,  0.26806568,  0.20669372,
         0.        ,  0.        ,  0.05341289, -2.60316846,  0.        ,
         0.        ,  0.01817835,  0.        ,  0.22873531,  0.        ,
         0.07045032,  1.46512465],
       [ 0.1678271 ,  0.62555077,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ,  0.14320498,  0.15651802,
         0.        ,  0.07562668,  0.        ,  0.        , -1.93443057,
         0.        ,  0.22907261,  0.02711104,  0.        ,  0.12817012,
         0.24311576,  0.        ],
       [ 0.        ,  0.        ,  1.1801045 ,  0.05034257,  0.        ,
         0.        , -0.06505858, -0.        ,  0.        ,  0.23811878,
         0.        ,  0.        ,  0.00554857,  0.        ,  0.        ,
        -2.35425875,  0.29977121,  0.        ,  0.        ,  0.        ,
         0.344138  ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.99336033,  0.13988837,
         0.        , -0.        , -0.        ,  0.        ,  0.        ,
         0.        , -0.        ,  0.03686225,  0.01817835,  0.22907261,
         0.29977121, -2.41706973,  0.        ,  0.16096237,  0.        ,
         0.2311509 ,  0.35085835],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.01062495,  0.41900489,  0.        ,  0.        ,  0.        ,
         0.08907438,  0.        ,  0.        ,  0.        ,  0.02711104,
         0.        ,  0.        , -1.40671607,  0.3608923 ,  0.15252059,
         0.        ,  0.        ],
       [ 0.        , -0.        ,  0.        ,  0.        , -0.        ,
         0.        , -0.        ,  0.0859003 ,  0.        ,  0.05597093,
         0.        ,  0.        ,  0.        ,  0.22873531,  0.        ,
         0.        ,  0.16096237,  0.3608923 , -1.85633941,  0.        ,
         0.14648113,  0.6522768 ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
        -0.        ,  0.        , -0.        ,  0.31470402,  0.        ,
         0.56075635,  0.11816121,  0.        ,  0.        ,  0.12817012,
         0.        ,  0.        ,  0.15252059,  0.        , -1.74566078,
         0.1448179 ,  0.13400561],
       [ 0.08714262,  0.        ,  0.20584319,  0.        ,  0.        ,
         0.        ,  0.        , -0.        ,  0.44714846,  0.23560921,
         0.        ,  0.        ,  1.04496486,  0.07045032,  0.24311576,
         0.344138  ,  0.2311509 ,  0.        ,  0.14648113,  0.1448179 ,
        -3.03178627,  0.04615476],
       [ 0.        , -0.        ,  0.        ,  0.        ,  0.        ,
         0.        , -0.        ,  0.        ,  0.        ,  0.05200272,
         0.        ,  0.        ,  0.        ,  1.46512465,  0.        ,
         0.        ,  0.35085835,  0.        ,  0.6522768 ,  0.13400561,
         0.04615476, -2.7901946 ]])), ('conn_model', 'sps'), ('coords', array([[ 41.46036719,  -7.7177768 ,  44.17087537],
       [ 22.6098635 ,  -4.56230735, -31.95640687],
       [ 46.24613187, -65.41561533,  30.40984289],
       [ -3.64342857, -66.68971429, -23.60742857],
       [ -4.46764253, -50.63995891, -13.20005136],
       [-50.25136791, -10.39928915,  -6.63124912],
       [ 25.51007813, -60.26367188,  53.30015625],
       [-29.8504807 , -89.22470943,   1.50272636],
       [ 32.80915227, -86.42231717,   2.04755712],
       [-57.46055697, -27.80877621, -12.65871519],
       [  5.86218182,  37.532     ,   2.95709091],
       [ 45.29406347, -21.88872143,  43.83195177],
       [ -6.17316943, -25.68163193,  57.79975058],
       [ 10.77466562, -15.93674272,  -9.79040126],
       [ 46.06022409, -17.97478992,   8.11204482],
       [ 13.6988191 , -66.42386874,  -5.03918905],
       [ 49.02416244, -28.17928934, -27.29678511],
       [-13.29384318, -67.50893365,  -5.87891203],
       [ 26.30807397, -20.53450609, -12.81235904],
       [  5.4625651 ,  21.54329427,  28.04296875],
       [-48.32543193, -28.42695232, -28.30117484],
       [  7.90322581, -44.98354839,  19.30645161]])), ('dens_thresh', True), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012'), ('disp_filt', False), ('function_str', 'def thresh_func(dens_thresh, thr, conn_matrix, conn_model, network, ID, dir_path, roi, node_size, min_span_tree,\n                smooth, disp_filt, parc, prune, atlas, uatlas, labels, coords, c_boot, norm, binary,\n                hpass):\n    """\n    Threshold a functional connectivity matrix using any of a variety of methods.\n\n    Parameters\n    ----------\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    thr : float\n        A value, between 0 and 1, to threshold the graph using any variety of methods\n        triggered through other options.\n    conn_matrix : array\n        Adjacency matrix stored as an m x n array of nodes and edges.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        \'backbone network\' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n\n    Returns\n    -------\n    conn_matrix_thr : array\n        Weighted, thresholded, NxN matrix.\n    edge_threshold : str\n        The string percentage representation of thr.\n    est_path : str\n        File path to the thresholded graph, conn_matrix_thr, saved as a numpy array in .npy format.\n    thr : float\n        The value, between 0 and 1, used to threshold the graph using any variety of methods\n        triggered through other options.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    from pynets import utils, thresholding\n\n    thr_perc = 100 * float(thr)\n    edge_threshold = "%s%s" % (str(thr_perc), \'%\')\n    if parc is True:\n        node_size = \'parc\'\n\n    if np.count_nonzero(conn_matrix) == 0:\n        raise ValueError(\'ERROR: Raw connectivity matrix contains only zeros.\')\n\n    # Save unthresholded\n    unthr_path = utils.create_unthr_path(ID, network, conn_model, roi, dir_path)\n    utils.save_mat(conn_matrix, unthr_path)\n\n    if min_span_tree is True:\n        print(\'Using local thresholding option with the Minimum Spanning Tree (MST)...\\n\')\n        if dens_thresh is False:\n            thr_type = \'MSTprop\'\n            conn_matrix_thr = thresholding.local_thresholding_prop(conn_matrix, thr)\n        else:\n            thr_type = \'MSTdens\'\n            conn_matrix_thr = thresholding.local_thresholding_dens(conn_matrix, thr)\n    elif disp_filt is True:\n        thr_type = \'DISP_alpha\'\n        G1 = thresholding.disparity_filter(nx.from_numpy_array(conn_matrix))\n        # G2 = nx.Graph([(u, v, d) for u, v, d in G1.edges(data=True) if d[\'alpha\'] < thr])\n        print(\'Computing edge disparity significance with alpha = %s\' % thr)\n        print(\'Filtered graph: nodes = %s, edges = %s\' % (G1.number_of_nodes(), G1.number_of_edges()))\n        # print(\'Backbone graph: nodes = %s, edges = %s\' % (G2.number_of_nodes(), G2.number_of_edges()))\n        # print(G2.edges(data=True))\n        conn_matrix_thr = nx.to_numpy_array(G1)\n    else:\n        if dens_thresh is False:\n            thr_type = \'prop\'\n            print("%s%.2f%s" % (\'\\nThresholding proportionally at: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.threshold_proportional(conn_matrix, float(thr))\n        else:\n            thr_type = \'dens\'\n            print("%s%.2f%s" % (\'\\nThresholding to achieve density of: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.density_thresholding(conn_matrix, float(thr))\n\n    if not nx.is_connected(nx.from_numpy_matrix(conn_matrix_thr)):\n        print(\'Warning: Fragmented graph\')\n\n    # Save thresholded mat\n    est_path = utils.create_est_path_func(ID, network, conn_model, thr, roi, dir_path, node_size, smooth, c_boot,\n                                          thr_type, hpass, parc)\n\n    utils.save_mat(conn_matrix_thr, est_path)\n\n    return conn_matrix_thr, edge_threshold, est_path, thr, node_size, network, conn_model, roi, smooth, prune, ID, dir_path, atlas, uatlas, labels, coords, c_boot, norm, binary, hpass\n'), ('hpass', None), ('labels', array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
       nan, nan, nan, nan, nan, nan, nan, nan, nan])), ('min_span_tree', False), ('network', 'Default'), ('node_size', None), ('norm', 0), ('parc', True), ('prune', '1'), ('roi', None), ('smooth', 0), ('thr', '0.2'), ('uatlas', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/reg_fmri/anat_reg/DesikanKlein2012_t1w_mni_gm.nii.gz')]