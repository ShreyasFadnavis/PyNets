[('ID', '0021001'), ('atlas', 'DesikanKlein2012'), ('block_size', None), ('c_boot', 0), ('conf', None), ('coords', [('41.4603671909', '-7.7177768031', '44.1708753681'), ('22.6098634963', '-4.5623073536', '-31.9564068692'), ('46.2461318734', '-65.4156153297', '30.4098428945'), ('-3.6434285714', '-66.6897142857', '-23.6074285714'), ('-4.4676425270', '-50.6399589111', '-13.2000513611'), ('-50.2513679091', '-10.3992891549', '-6.6312491231'), ('25.5100781250', '-60.2636718750', '53.3001562500'), ('-29.8504807002', '-89.2247094275', '1.5027263596'), ('32.8091522695', '-86.4223171713', '2.0475571243'), ('-57.4605569733', '-27.8087762121', '-12.6587151892'), ('5.8621818182', '37.5320000000', '2.9570909091'), ('45.2940634681', '-21.8887214268', '43.8319517709'), ('-6.1731694281', '-25.6816319259', '57.7997505790'), ('10.7746656176', '-15.9367427223', '-9.7904012589'), ('46.0602240896', '-17.9747899160', '8.1120448179'), ('13.6988191034', '-66.4238687428', '-5.0391890480'), ('49.0241624365', '-28.1792893401', '-27.2967851100'), ('-13.2938431774', '-67.5089336520', '-5.8789120291'), ('26.3080739738', '-20.5345060893', '-12.8123590438'), ('5.4625651042', '21.5432942708', '28.0429687500'), ('-48.3254319281', '-28.4269523151', '-28.3011748445'), ('7.9032258065', '-44.9835483871', '19.3064516129')]), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012'), ('func_file', ('/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/002.nii.gz', '4bfd468a8fbe25571acba334793eb936')), ('function_str', 'def extract_ts_parc(net_parcels_map_nifti, conf, func_file, coords, roi, dir_path, ID, network, smooth, atlas,\n                    uatlas, labels, c_boot, block_size, hpass, detrending=True):\n    """\n    API for employing Nilearn\'s NiftiLabelsMasker to extract fMRI time-series data from spherical ROI\'s based on a\n    given 3D atlas image of integer-based voxel intensities. The resulting time-series can then optionally be resampled\n    using circular-block bootrapping. The final 2D m x n array is ultimately saved to file in .npy format\n\n    Parameters\n    ----------\n    net_parcels_map_nifti : Nifti1Image\n        A nibabel-based nifti image consisting of a 3D array with integer voxel intensities corresponding to ROI\n        membership.\n    conf : str\n        File path to a confound regressor file for reduce noise in the time-series when extracting from ROI\'s.\n    func_file : str\n        File path to a preprocessed functional Nifti1Image in standard space.\n    coords : list\n        List of (x, y, z) tuples corresponding to the center-of-mass of each parcellation node.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    ID : str\n        A subject id or other unique identifier.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\')\n        used to filter nodes in the study of brain subgraphs.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to graph nodes.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    block_size : int\n        Size bootstrap blocks if bootstrapping (c_boot) is performed.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    detrending : bool\n        Indicates whether to remove linear trends from time-series when extracting across nodes. Default is True.\n\n    Returns\n    -------\n    ts_within_nodes : array\n        2D m x n array consisting of the time-series signal for each ROI node where m = number of scans and\n        n = number of ROI\'s, where ROI\'s are parcel volumes.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    import os.path as op\n    from nilearn import input_data\n    from pynets import utils\n\n    if not op.isfile(func_file):\n        raise ValueError(\'\\nERROR: Functional data input not found! Check that the file(s) specified with the -i flag \'\n                         \'exist(s)\')\n\n    if conf:\n        if not op.isfile(conf):\n            raise ValueError(\'\\nERROR: Confound regressor file not found! Check that the file(s) specified with the \'\n                             \'-conf flag exist(s)\')\n\n    parcel_masker = input_data.NiftiLabelsMasker(labels_img=net_parcels_map_nifti, background_label=0,\n                                                 standardize=True, smoothing_fwhm=float(smooth), high_pass=hpass,\n                                                 detrend=detrending, verbose=2, resampling_target=\'data\')\n    ts_within_nodes = parcel_masker.fit_transform(func_file, confounds=conf)\n    if ts_within_nodes is None:\n        raise RuntimeError(\'\\nERROR: Time-series extraction failed!\')\n    if float(c_boot) > 0:\n        print("%s%s%s" % (\'Performing circular block bootstrapping iteration: \', c_boot, \'...\'))\n        ts_within_nodes = utils.timeseries_bootstrap(ts_within_nodes, block_size)[0]\n    print("%s%s%d%s" % (\'\\nTime series has {0} samples\'.format(ts_within_nodes.shape[0]), \' mean extracted from \',\n                        len(coords), \' volumetric ROI\\\'s\'))\n    print("%s%s%s" % (\'Smoothing FWHM: \', smooth, \' mm\\n\'))\n    print("%s%s%s" % (\'Applying high-pass filter: \', hpass, \' Hz\\n\'))\n\n    # Save time series as file\n    utils.save_ts_to_file(roi, network, ID, dir_path, ts_within_nodes, c_boot)\n    node_size = None\n    return ts_within_nodes, node_size, smooth, dir_path, atlas, uatlas, labels, coords, c_boot, hpass\n'), ('hpass', None), ('labels', ['nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan']), ('net_parcels_map_nifti', <nibabel.nifti1.Nifti1Image object at 0x116db69e8>), ('network', 'Default'), ('roi', None), ('smooth', 0), ('uatlas', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/reg_fmri/anat_reg/DesikanKlein2012_t1w_mni_gm.nii.gz')]