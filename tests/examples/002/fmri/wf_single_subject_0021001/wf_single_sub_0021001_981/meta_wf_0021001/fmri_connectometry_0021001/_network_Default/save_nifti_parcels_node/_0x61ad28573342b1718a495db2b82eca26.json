[('ID', '0021001'), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012'), ('function_str', 'def save_nifti_parcels_map(ID, dir_path, roi, network, net_parcels_map_nifti):\n    """\n    This function takes a Nifti1Image parcellation object resulting from some form of masking and saves it to disk.\n\n    Parameters\n    ----------\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    net_parcels_map_nifti : Nifti1Image\n        A nibabel-based nifti image consisting of a 3D array with integer voxel intensities corresponding to ROI\n        membership.\n\n    Returns\n    -------\n    net_parcels_nii_path : str\n        File path to Nifti1Image consisting of a 3D array with integer voxel intensities corresponding to ROI\n        membership.\n    """\n    import os\n    import warnings\n    warnings.filterwarnings("ignore")\n\n    namer_dir = dir_path + \'/parcellations\'\n    if not os.path.isdir(namer_dir):\n        os.mkdir(namer_dir)\n\n    net_parcels_nii_path = "%s%s%s%s%s%s%s" % (namer_dir, \'/\', str(ID), \'_parcels_masked_\',\n                                               \'%s\' % (network + \'_\' if network is not None else \'\'),\n                                               \'%s\' % (op.basename(roi).split(\'.\')[0] + \'_\' if roi is not None else \'\'),\n                                               \'.nii.gz\')\n\n    nib.save(net_parcels_map_nifti, net_parcels_nii_path)\n    return net_parcels_nii_path\n'), ('net_parcels_map_nifti', <nibabel.nifti1.Nifti1Image object at 0xa16a620f0>), ('network', None), ('roi', None)]