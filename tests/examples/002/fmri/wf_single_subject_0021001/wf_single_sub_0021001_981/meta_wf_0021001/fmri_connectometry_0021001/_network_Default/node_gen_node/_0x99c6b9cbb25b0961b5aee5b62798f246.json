[('ID', '0021001'), ('atlas', 'DesikanKlein2012'), ('coords', [('41.4603671909', '-7.7177768031', '44.1708753681'), ('22.6098634963', '-4.5623073536', '-31.9564068692'), ('46.2461318734', '-65.4156153297', '30.4098428945'), ('-3.6434285714', '-66.6897142857', '-23.6074285714'), ('-4.4676425270', '-50.6399589111', '-13.2000513611'), ('-50.2513679091', '-10.3992891549', '-6.6312491231'), ('25.5100781250', '-60.2636718750', '53.3001562500'), ('-29.8504807002', '-89.2247094275', '1.5027263596'), ('32.8091522695', '-86.4223171713', '2.0475571243'), ('-57.4605569733', '-27.8087762121', '-12.6587151892'), ('5.8621818182', '37.5320000000', '2.9570909091'), ('45.2940634681', '-21.8887214268', '43.8319517709'), ('-6.1731694281', '-25.6816319259', '57.7997505790'), ('10.7746656176', '-15.9367427223', '-9.7904012589'), ('46.0602240896', '-17.9747899160', '8.1120448179'), ('13.6988191034', '-66.4238687428', '-5.0391890480'), ('49.0241624365', '-28.1792893401', '-27.2967851100'), ('-13.2938431774', '-67.5089336520', '-5.8789120291'), ('26.3080739738', '-20.5345060893', '-12.8123590438'), ('5.4625651042', '21.5432942708', '28.0429687500'), ('-48.3254319281', '-28.4269523151', '-28.3011748445'), ('7.9032258065', '-44.9835483871', '19.3064516129')]), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012'), ('function_str', 'def node_gen(coords, parcel_list, labels, dir_path, ID, parc, atlas, uatlas):\n    """\n    In the case that masking was not applied, this function generate nodes based on atlas definitions established by\n    fetch_nodes_and_labels.\n\n    Parameters\n    ----------\n    coords : list\n        List of (x, y, z) tuples in mm-space corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    parcel_list : list\n        List of 3D boolean numpy arrays or binarized Nifti1Images corresponding to ROI masks.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    ID : str\n        A subject id or other unique identifier.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    atlas : str\n        Name of a Nilearn-hosted coordinate or parcellation/label-based atlas supported for fetching.\n        See Nilearn\'s datasets.atlas module for more detailed reference.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n\n    Returns\n    -------\n    net_parcels_map_nifti : Nifti1Image\n        A nibabel-based nifti image consisting of a 3D array with integer voxel intensities corresponding to ROI\n        membership.\n    coords : list\n        List of (x, y, z) tuples in mm-space corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    atlas : str\n        Name of a Nilearn-hosted coordinate or parcellation/label-based atlas supported for fetching.\n        See Nilearn\'s datasets.atlas module for more detailed reference.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    try:\n        import cPickle as pickle\n    except ImportError:\n        import _pickle as pickle\n    from pynets import nodemaker\n    pick_dump = False\n\n    if parc is True:\n        [net_parcels_map_nifti, _] = nodemaker.create_parcel_atlas(parcel_list)\n    else:\n        net_parcels_map_nifti = None\n        print(\'No additional roi masking...\')\n\n    coords = list(tuple(x) for x in coords)\n    if pick_dump is True:\n        # Save coords to pickle\n        coords_path = "%s%s" % (dir_path, \'/atlas_coords_wb.pkl\')\n        with open(coords_path, \'wb\') as f:\n            pickle.dump(coords, f, protocol=2)\n        # Save labels to pickle\n        labels_path = "%s%s" % (dir_path, \'/atlas_labelnames_wb.pkl\')\n        with open(labels_path, \'wb\') as f:\n            pickle.dump(labels, f, protocol=2)\n\n    return net_parcels_map_nifti, coords, labels, atlas, uatlas\n'), ('labels', ['nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan']), ('par_max', 96), ('parc', True), ('parcel_list', [<nibabel.nifti1.Nifti1Image object at 0xd1abe6e48>, <nibabel.nifti1.Nifti1Image object at 0xa16a647b8>, <nibabel.nifti1.Nifti1Image object at 0xa16a640f0>, <nibabel.nifti1.Nifti1Image object at 0xa16a64400>, <nibabel.nifti1.Nifti1Image object at 0xa16a60e80>, <nibabel.nifti1.Nifti1Image object at 0xa16a60c50>, <nibabel.nifti1.Nifti1Image object at 0xa16a60f60>, <nibabel.nifti1.Nifti1Image object at 0xa16a60860>, <nibabel.nifti1.Nifti1Image object at 0xa17b640f0>, <nibabel.nifti1.Nifti1Image object at 0xa17b64240>, <nibabel.nifti1.Nifti1Image object at 0xa17b64390>, <nibabel.nifti1.Nifti1Image object at 0xa17b644e0>, <nibabel.nifti1.Nifti1Image object at 0xa17b64630>, <nibabel.nifti1.Nifti1Image object at 0xa17b64780>, <nibabel.nifti1.Nifti1Image object at 0xa17b648d0>, <nibabel.nifti1.Nifti1Image object at 0xa17b64a20>, <nibabel.nifti1.Nifti1Image object at 0xa17b64b70>, <nibabel.nifti1.Nifti1Image object at 0xa17b64cc0>, <nibabel.nifti1.Nifti1Image object at 0xa17b64e10>, <nibabel.nifti1.Nifti1Image object at 0xa17b64f60>, <nibabel.nifti1.Nifti1Image object at 0xa17b5d0f0>, <nibabel.nifti1.Nifti1Image object at 0xa17b5d240>]), ('roi', None), ('uatlas', ('/Users/derekpisner/Applications/PyNets/pynets/atlases/DesikanKlein2012.nii.gz', '8b05327694ff8612e04249dae9d49822'))]