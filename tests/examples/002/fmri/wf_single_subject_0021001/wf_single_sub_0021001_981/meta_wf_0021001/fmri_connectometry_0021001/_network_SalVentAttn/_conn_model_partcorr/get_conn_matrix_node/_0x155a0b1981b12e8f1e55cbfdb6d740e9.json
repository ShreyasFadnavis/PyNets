[('ID', '0021001'), ('atlas', 'DesikanKlein2012'), ('binary', False), ('c_boot', 0), ('conn_model', 'partcorr'), ('coords', [('54.1869893869', '-35.0466519050', '36.2273803161'), ('-13.2938431774', '-67.5089336520', '-5.8789120291'), ('7.5376302586', '-24.8548822848', '58.6949054419'), ('-5.2133712660', '-18.3926031294', '39.6963015647'), ('22.6098634963', '-4.5623073536', '-31.9564068692'), ('-29.8504807002', '-89.2247094275', '1.5027263596'), ('-6.1731694281', '-25.6816319259', '57.7997505790'), ('20.5507772021', '-2.8352331606', '-0.7077720207'), ('-4.0427093760', '-57.2475809142', '-38.7594260928'), ('5.2300613497', '37.4843217451', '-17.2699386503'), ('24.1039933444', '-29.3789517471', '-18.4342762063'), ('-22.8722612650', '-5.0318313353', '-32.0425795783'), ('34.7928110244', '-43.0476052809', '-20.9995181652'), ('-35.8306627355', '12.0902448404', '47.0801179336'), ('13.6988191034', '-66.4238687428', '-5.0391890480')]), ('dens_thresh', True), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012'), ('disp_filt', False), ('function_str', 'def get_conn_matrix(time_series, conn_model, dir_path, node_size, smooth, dens_thresh, network, ID, roi, min_span_tree,\n                    disp_filt, parc, prune, atlas, uatlas, labels, coords, c_boot, norm, binary,\n                    hpass):\n    """\n    Computes a functional connectivity matrix based on a node-extracted time-series array.\n    Includes a library of routines across Nilearn, scikit-learn, and skggm packages, among others.\n\n    Parameters\n    ----------\n    time_series : array\n        2D m x n array consisting of the time-series signal for each ROI node where m = number of scans and\n        n = number of ROI\'s.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    ID : str\n        A subject id or other unique identifier.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        \'backbone network\' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n\n    Returns\n    -------\n    conn_matrix : array\n        Adjacency matrix stored as an m x n array of nodes and edges.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s for tracking.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    ID : str\n        A subject id or other unique identifier.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        \'backbone network\' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to graph nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    from nilearn.connectome import ConnectivityMeasure\n    from sklearn.covariance import GraphicalLassoCV\n\n    conn_matrix = None\n    if conn_model == \'corr\' or conn_model == \'cor\' or conn_model == \'correlation\':\n        # credit: nilearn\n        print(\'\\nComputing correlation matrix...\\n\')\n        conn_measure = ConnectivityMeasure(kind=\'correlation\')\n        conn_matrix = conn_measure.fit_transform([time_series])[0]\n    elif conn_model == \'partcorr\' or conn_model == \'parcorr\' or conn_model == \'partialcorrelation\':\n        # credit: nilearn\n        print(\'\\nComputing partial correlation matrix...\\n\')\n        conn_measure = ConnectivityMeasure(kind=\'partial correlation\')\n        conn_matrix = conn_measure.fit_transform([time_series])[0]\n    elif conn_model == \'cov\' or conn_model == \'covariance\' or conn_model == \'covar\' or conn_model == \'sps\' or conn_model == \'sparse\' or conn_model == \'precision\':\n        # Fit estimator to matrix to get sparse matrix\n        estimator_shrunk = None\n        estimator = GraphicalLassoCV(cv=5)\n        try:\n            print(\'\\nComputing covariance...\\n\')\n            estimator.fit(time_series)\n        except:\n            print(\'Unstable Lasso estimation--Attempting to re-run by first applying shrinkage...\')\n            try:\n                from sklearn.covariance import GraphicalLasso, empirical_covariance, shrunk_covariance\n                emp_cov = empirical_covariance(time_series)\n                for i in np.arange(0.8, 0.99, 0.01):\n                    shrunk_cov = shrunk_covariance(emp_cov, shrinkage=i)\n                    alphaRange = 10.0 ** np.arange(-8, 0)\n                    for alpha in alphaRange:\n                        try:\n                            estimator_shrunk = GraphicalLasso(alpha)\n                            estimator_shrunk.fit(shrunk_cov)\n                            print("Retrying covariance matrix estimate with alpha=%s" % alpha)\n                            if estimator_shrunk is None:\n                                pass\n                            else:\n                                break\n                        except:\n                            print("Covariance estimation failed with shrinkage at alpha=%s" % alpha)\n                            continue\n            except ValueError:\n                print(\'Unstable Lasso estimation! Shrinkage failed. A different connectivity model may be needed.\')\n        if estimator is None and estimator_shrunk is None:\n            raise RuntimeError(\'\\nERROR: Covariance estimation failed.\')\n        if conn_model == \'sps\' or conn_model == \'sparse\' or conn_model == \'precision\':\n            if estimator_shrunk is None:\n                print(\'\\nFetching precision matrix from covariance estimator...\\n\')\n                conn_matrix = -estimator.precision_\n            else:\n                print(\'\\nFetching shrunk precision matrix from covariance estimator...\\n\')\n                conn_matrix = -estimator_shrunk.precision_\n        elif conn_model == \'cov\' or conn_model == \'covariance\' or conn_model == \'covar\':\n            if estimator_shrunk is None:\n                print(\'\\nFetching covariance matrix from covariance estimator...\\n\')\n                conn_matrix = estimator.covariance_\n            else:\n                conn_matrix = estimator_shrunk.covariance_\n    elif conn_model == \'QuicGraphicalLasso\':\n        try:\n            from inverse_covariance import QuicGraphicalLasso\n        except ImportError:\n            print(\'Cannot run QuicGraphLasso. Skggm not installed!\')\n\n        # Compute the sparse inverse covariance via QuicGraphLasso\n        # credit: skggm\n        model = QuicGraphicalLasso(\n            init_method=\'cov\',\n            lam=0.5,\n            mode=\'default\',\n            verbose=1)\n        print(\'\\nCalculating QuicGraphLasso precision matrix using skggm...\\n\')\n        model.fit(time_series)\n        conn_matrix = -model.precision_\n    elif conn_model == \'QuicGraphLassoCV\':\n        try:\n            from inverse_covariance import QuicGraphicalLassoCV\n        except ImportError:\n            print(\'Cannot run QuicGraphLassoCV. Skggm not installed!\')\n\n        # Compute the sparse inverse covariance via QuicGraphLassoCV\n        # credit: skggm\n        model = QuicGraphicalLassoCV(\n            init_method=\'cov\',\n            verbose=1)\n        print(\'\\nCalculating QuicGraphLassoCV precision matrix using skggm...\\n\')\n        model.fit(time_series)\n        conn_matrix = -model.precision_\n    elif conn_model == \'QuicGraphicalLassoEBIC\':\n        try:\n            from inverse_covariance import QuicGraphicalLassoEBIC\n        except ImportError:\n            print(\'Cannot run QuicGraphLassoEBIC. Skggm not installed!\')\n\n        # Compute the sparse inverse covariance via QuicGraphLassoEBIC\n        # credit: skggm\n        model = QuicGraphicalLassoEBIC(\n            init_method=\'cov\',\n            verbose=1)\n        print(\'\\nCalculating QuicGraphLassoEBIC precision matrix using skggm...\\n\')\n        model.fit(time_series)\n        conn_matrix = -model.precision_\n    elif conn_model == \'AdaptiveQuicGraphLasso\':\n        try:\n            from inverse_covariance import AdaptiveQuicGraphicalLasso, QuicGraphicalLassoEBIC\n        except ImportError:\n            print(\'Cannot run AdaptiveGraphLasso. Skggm not installed!\')\n\n        # Compute the sparse inverse covariance via\n        # AdaptiveGraphLasso + QuicGraphLassoEBIC + method=\'binary\'\n        # credit: skggm\n        model = AdaptiveQuicGraphicalLasso(\n            estimator=QuicGraphicalLassoEBIC(\n                init_method=\'cov\',\n            ),\n            method=\'binary\',\n        )\n        print(\'\\nCalculating AdaptiveQuicGraphLasso precision matrix using skggm...\\n\')\n        model.fit(time_series)\n        conn_matrix = -model.estimator_.precision_\n    else:\n        raise ValueError(\'\\nERROR! No connectivity model specified at runtime. Select a valid estimator using the \'\n                         \'-mod flag.\')\n\n    if conn_matrix.shape < (2, 2):\n        raise RuntimeError(\'\\nERROR! Matrix estimation selection yielded an empty or 1-dimensional graph. \'\n                           \'Check time-series for errors or try using a different atlas\')\n\n    coords = np.array(coords)\n    labels = np.array(labels)\n    return conn_matrix, conn_model, dir_path, node_size, smooth, dens_thresh, network, ID, roi, min_span_tree, disp_filt, parc, prune, atlas, uatlas, labels, coords, c_boot, norm, binary, hpass\n'), ('hpass', None), ('labels', ['nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan']), ('min_span_tree', False), ('network', 'SalVentAttn'), ('node_size', None), ('norm', 0), ('parc', True), ('prune', '1'), ('roi', None), ('smooth', 0), ('time_series', array([[ 1.8216035 ,  1.8867463 ,  2.428473  , ...,  2.0709388 ,
         1.4977248 ,  2.0285647 ],
       [-0.42965093, -0.47361463, -0.12245914, ..., -0.17132154,
         0.5810947 ,  0.29684192],
       [ 0.4241159 , -0.58999395,  0.5557735 , ..., -0.16899581,
        -0.45163587,  0.26892996],
       ...,
       [ 0.32354212, -0.34934202,  0.3257923 , ...,  0.19165032,
        -0.01654548, -0.08241437],
       [ 0.4459056 ,  1.1703486 ,  0.2037435 , ...,  1.6493644 ,
         0.77825814,  0.44683447],
       [-0.16782938,  0.36983198, -0.65302557, ...,  0.8611615 ,
        -1.2669188 , -1.1072674 ]], dtype=float32)), ('uatlas', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/reg_fmri/anat_reg/DesikanKlein2012_t1w_mni_gm.nii.gz')]