[('ID', '0021001'), ('atlas', 'DesikanKlein2012'), ('binary', False), ('c_boot', 0), ('conn_matrix', array([[-2.63350762e+00,  0.00000000e+00,  0.00000000e+00,
         4.34204412e-01,  0.00000000e+00,  1.73187837e-02,
         0.00000000e+00,  2.96291599e-01,  1.24128398e+00,
         0.00000000e+00,  2.65459595e-02,  1.60370402e-01,
         1.08518756e-01,  0.00000000e+00,  2.03356033e-01],
       [ 0.00000000e+00, -2.73937870e+00,  0.00000000e+00,
         4.10617126e-01,  7.61560642e-01,  3.18930234e-02,
         1.56847224e-02,  0.00000000e+00,  0.00000000e+00,
         1.31449884e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00, -1.25910613e+00,
         0.00000000e+00,  1.37122939e-01,  0.00000000e+00,
         8.48528011e-02,  1.01286931e-01,  0.00000000e+00,
         0.00000000e+00,  3.69721515e-01,  0.00000000e+00,
         3.28446543e-03,  0.00000000e+00,  0.00000000e+00],
       [ 4.34204412e-01,  4.10617126e-01,  0.00000000e+00,
        -3.01341629e+00,  0.00000000e+00,  9.12241349e-02,
         0.00000000e+00,  0.00000000e+00,  2.85457169e-01,
         3.21198934e-01,  0.00000000e+00,  1.08698673e+00,
         4.53047627e-01,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  7.61560642e-01,  1.37122939e-01,
         0.00000000e+00, -2.27134813e+00,  4.79152482e-01,
         1.55796977e-02,  0.00000000e+00,  0.00000000e+00,
         2.75022107e-01,  3.79456169e-02,  0.00000000e+00,
         3.28836702e-01,  1.48396021e-01,  0.00000000e+00],
       [ 1.73187837e-02,  3.18930234e-02,  0.00000000e+00,
         9.12241349e-02,  4.79152482e-01, -3.12205686e+00,
         3.49994484e-01,  3.33186143e-01,  0.00000000e+00,
         3.11744547e-02,  1.17007116e-01,  0.00000000e+00,
         1.62109618e-02,  1.21668855e+00,  5.30701815e-01],
       [ 0.00000000e+00,  1.56847224e-02,  8.48528011e-02,
         0.00000000e+00,  1.55796977e-02,  3.49994484e-01,
        -1.75016720e+00,  4.46914594e-01,  0.00000000e+00,
         9.18469341e-02,  4.34259124e-01,  0.00000000e+00,
         0.00000000e+00,  2.17465800e-03,  0.00000000e+00],
       [ 2.96291599e-01,  0.00000000e+00,  1.01286931e-01,
         0.00000000e+00,  0.00000000e+00,  3.33186143e-01,
         4.46914594e-01, -2.22842122e+00,  0.00000000e+00,
         0.00000000e+00,  1.77288501e-02,  0.00000000e+00,
         0.00000000e+00,  1.17160406e-01,  7.63015007e-01],
       [ 1.24128398e+00,  0.00000000e+00,  0.00000000e+00,
         2.85457169e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.71273135e+00,
         0.00000000e+00,  0.00000000e+00,  5.22638704e-01,
         6.95451365e-02,  5.38331023e-02,  3.87562821e-01],
       [ 0.00000000e+00,  1.31449884e+00,  0.00000000e+00,
         3.21198934e-01,  2.75022107e-01,  3.11744547e-02,
         9.18469341e-02,  0.00000000e+00,  0.00000000e+00,
        -2.57647853e+00,  8.63628644e-03,  1.13109838e-01,
         2.42763662e-01,  0.00000000e+00,  0.00000000e+00],
       [ 2.65459595e-02,  0.00000000e+00,  3.69721515e-01,
         0.00000000e+00,  3.79456169e-02,  1.17007116e-01,
         4.34259124e-01,  1.77288501e-02,  0.00000000e+00,
         8.63628644e-03, -2.11597492e+00,  0.00000000e+00,
         3.88869562e-01,  4.15580894e-01,  2.78910575e-01],
       [ 1.60370402e-01,  0.00000000e+00,  0.00000000e+00,
         1.08698673e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  5.22638704e-01,
         1.13109838e-01,  0.00000000e+00, -2.49886097e+00,
         3.75386381e-01,  0.00000000e+00,  0.00000000e+00],
       [ 1.08518756e-01,  0.00000000e+00,  3.28446543e-03,
         4.53047627e-01,  3.28836702e-01,  1.62109618e-02,
         0.00000000e+00,  0.00000000e+00,  6.95451365e-02,
         2.42763662e-01,  3.88869562e-01,  3.75386381e-01,
        -2.18483576e+00,  1.02113512e-01,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  1.48396021e-01,  1.21668855e+00,
         2.17465800e-03,  1.17160406e-01,  5.38331023e-02,
         0.00000000e+00,  4.15580894e-01,  0.00000000e+00,
         1.02113512e-01, -2.77342531e+00,  5.69772152e-01],
       [ 2.03356033e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  5.30701815e-01,
         0.00000000e+00,  7.63015007e-01,  3.87562821e-01,
         0.00000000e+00,  2.78910575e-01,  0.00000000e+00,
         0.00000000e+00,  5.69772152e-01, -2.75636422e+00]])), ('conn_model', 'sps'), ('coords', array([[ 54.18698939, -35.04665191,  36.22738032],
       [-13.29384318, -67.50893365,  -5.87891203],
       [  7.53763026, -24.85488228,  58.69490544],
       [ -5.21337127, -18.39260313,  39.69630156],
       [ 22.6098635 ,  -4.56230735, -31.95640687],
       [-29.8504807 , -89.22470943,   1.50272636],
       [ -6.17316943, -25.68163193,  57.79975058],
       [ 20.5507772 ,  -2.83523316,  -0.70777202],
       [ -4.04270938, -57.24758091, -38.75942609],
       [  5.23006135,  37.48432175, -17.26993865],
       [ 24.10399334, -29.37895175, -18.43427621],
       [-22.87226126,  -5.03183134, -32.04257958],
       [ 34.79281102, -43.04760528, -20.99951817],
       [-35.83066274,  12.09024484,  47.08011793],
       [ 13.6988191 , -66.42386874,  -5.03918905]])), ('dens_thresh', True), ('dir_path', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/DesikanKlein2012'), ('disp_filt', False), ('function_str', 'def thresh_func(dens_thresh, thr, conn_matrix, conn_model, network, ID, dir_path, roi, node_size, min_span_tree,\n                smooth, disp_filt, parc, prune, atlas, uatlas, labels, coords, c_boot, norm, binary,\n                hpass):\n    """\n    Threshold a functional connectivity matrix using any of a variety of methods.\n\n    Parameters\n    ----------\n    dens_thresh : bool\n        Indicates whether a target graph density is to be used as the basis for\n        thresholding.\n    thr : float\n        A value, between 0 and 1, to threshold the graph using any variety of methods\n        triggered through other options.\n    conn_matrix : array\n        Adjacency matrix stored as an m x n array of nodes and edges.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    min_span_tree : bool\n        Indicates whether local thresholding from the Minimum Spanning Tree\n        should be used.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    disp_filt : bool\n        Indicates whether local thresholding using a disparity filter and\n        \'backbone network\' should be used.\n    parc : bool\n        Indicates whether to use parcels instead of coordinates as ROI nodes.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n\n    Returns\n    -------\n    conn_matrix_thr : array\n        Weighted, thresholded, NxN matrix.\n    edge_threshold : str\n        The string percentage representation of thr.\n    est_path : str\n        File path to the thresholded graph, conn_matrix_thr, saved as a numpy array in .npy format.\n    thr : float\n        The value, between 0 and 1, used to threshold the graph using any variety of methods\n        triggered through other options.\n    node_size : int\n        Spherical centroid node size in the case that coordinate-based centroids\n        are used as ROI\'s.\n    network : str\n        Resting-state network based on Yeo-7 and Yeo-17 naming (e.g. \'Default\') used to filter nodes in the study of\n        brain subgraphs.\n    conn_model : str\n       Connectivity estimation model (e.g. corr for correlation, cov for covariance, sps for precision covariance,\n       partcorr for partial correlation). sps type is used by default.\n    roi : str\n        File path to binarized/boolean region-of-interest Nifti1Image file.\n    smooth : int\n        Smoothing width (mm fwhm) to apply to time-series when extracting signal from ROI\'s.\n    prune : bool\n        Indicates whether to prune final graph of disconnected nodes/isolates.\n    ID : str\n        A subject id or other unique identifier.\n    dir_path : str\n        Path to directory containing subject derivative data for given run.\n    atlas : str\n        Name of atlas parcellation used.\n    uatlas : str\n        File path to atlas parcellation Nifti1Image in MNI template space.\n    labels : list\n        List of string labels corresponding to ROI nodes.\n    coords : list\n        List of (x, y, z) tuples corresponding to a coordinate atlas used or\n        which represent the center-of-mass of each parcellation node.\n    c_boot : int\n        Number of bootstraps if user specified circular-block bootstrapped resampling of the node-extracted time-series.\n    norm : int\n        Indicates method of normalizing resulting graph.\n    binary : bool\n        Indicates whether to binarize resulting graph edges to form an\n        unweighted graph.\n    hpass : bool\n        High-pass filter values (Hz) to apply to node-extracted time-series.\n    """\n    import warnings\n    warnings.filterwarnings("ignore")\n    from pynets import utils, thresholding\n\n    thr_perc = 100 * float(thr)\n    edge_threshold = "%s%s" % (str(thr_perc), \'%\')\n    if parc is True:\n        node_size = \'parc\'\n\n    if np.count_nonzero(conn_matrix) == 0:\n        raise ValueError(\'ERROR: Raw connectivity matrix contains only zeros.\')\n\n    # Save unthresholded\n    unthr_path = utils.create_unthr_path(ID, network, conn_model, roi, dir_path)\n    utils.save_mat(conn_matrix, unthr_path)\n\n    if min_span_tree is True:\n        print(\'Using local thresholding option with the Minimum Spanning Tree (MST)...\\n\')\n        if dens_thresh is False:\n            thr_type = \'MSTprop\'\n            conn_matrix_thr = thresholding.local_thresholding_prop(conn_matrix, thr)\n        else:\n            thr_type = \'MSTdens\'\n            conn_matrix_thr = thresholding.local_thresholding_dens(conn_matrix, thr)\n    elif disp_filt is True:\n        thr_type = \'DISP_alpha\'\n        G1 = thresholding.disparity_filter(nx.from_numpy_array(conn_matrix))\n        # G2 = nx.Graph([(u, v, d) for u, v, d in G1.edges(data=True) if d[\'alpha\'] < thr])\n        print(\'Computing edge disparity significance with alpha = %s\' % thr)\n        print(\'Filtered graph: nodes = %s, edges = %s\' % (G1.number_of_nodes(), G1.number_of_edges()))\n        # print(\'Backbone graph: nodes = %s, edges = %s\' % (G2.number_of_nodes(), G2.number_of_edges()))\n        # print(G2.edges(data=True))\n        conn_matrix_thr = nx.to_numpy_array(G1)\n    else:\n        if dens_thresh is False:\n            thr_type = \'prop\'\n            print("%s%.2f%s" % (\'\\nThresholding proportionally at: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.threshold_proportional(conn_matrix, float(thr))\n        else:\n            thr_type = \'dens\'\n            print("%s%.2f%s" % (\'\\nThresholding to achieve density of: \', thr_perc, \'% ...\\n\'))\n            conn_matrix_thr = thresholding.density_thresholding(conn_matrix, float(thr))\n\n    if not nx.is_connected(nx.from_numpy_matrix(conn_matrix_thr)):\n        print(\'Warning: Fragmented graph\')\n\n    # Save thresholded mat\n    est_path = utils.create_est_path_func(ID, network, conn_model, thr, roi, dir_path, node_size, smooth, c_boot,\n                                          thr_type, hpass, parc)\n\n    utils.save_mat(conn_matrix_thr, est_path)\n\n    return conn_matrix_thr, edge_threshold, est_path, thr, node_size, network, conn_model, roi, smooth, prune, ID, dir_path, atlas, uatlas, labels, coords, c_boot, norm, binary, hpass\n'), ('hpass', None), ('labels', array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
       nan, nan])), ('min_span_tree', False), ('network', 'SalVentAttn'), ('node_size', None), ('norm', 0), ('parc', True), ('prune', '1'), ('roi', None), ('smooth', 0), ('thr', '0.2'), ('uatlas', '/Users/derekpisner/Applications/PyNets/tests/examples/002/fmri/reg_fmri/anat_reg/DesikanKlein2012_t1w_mni_gm.nii.gz')]