version: 2
jobs:

  build:
    environment:
      TZ: "/usr/share/zoneinfo/America/Chicago"
      SCRATCH: "/scratch"
    docker:
      - image: docker:18.01.0-ce-git
    working_directory: /tmp/src/pynets
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi

      - run:
          name: Install parallel gzip and python3
          command: |
            apk add --no-cache pigz python3
      - restore_cache:
          keys:
            - docker-v0-{{ .Branch }}-{{ .Revision }}
            - docker-v0-{{ .Branch }}-
            - docker-v0-master-
            - docker-v0-
          paths:
            - /tmp/cache/docker.tar.gz
      - setup_remote_docker
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Build Docker image
          no_output_timeout: 60m
          command: |
            # Get version, update files.
            THISVERSION=$( python3 get_version.py )
            if [[ ${THISVERSION:0:2} == "0+" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build \
                --cache-from=pynets \
                --rm=false \
                -t dpys/pynets:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
            # test if development image should be built
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[build[ _]?devel\]' )" != "" ]]; then
              echo "building development container"
              docker tag dpys/pynets pynets:unstable
              docker build \
                --rm=false \
                -t pynets \
                -f Dockerfile .
            fi

      - run:
          name: Smoke test Docker image
          command: |
            THISVERSION=$( python3 get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            DOCKERVERSION=$(docker run --rm -it dpys/pynets:latest pynets --version)
            DOCKERVERSION=${DOCKERVERSION%$'\r'}
            DOCKERVERSION=${DOCKERVERSION#*"PyNets v"}
            echo "VERSION: \"$THISVERSION\""
            echo "DOCKERVERSION: \"${DOCKERVERSION}\""
            test "$DOCKERVERSION" = "$THISVERSION"
      - run:
          name: Docker save
          no_output_timeout: 40m
          command: |
            mkdir -p /tmp/cache
            docker save debian:stretch-slim dpys/pynets:latest \
            | pigz -3 > /tmp/cache/docker.tar.gz

      - persist_to_workspace:
          root: /tmp
          paths:
            - src/pynets

  build_docs:
    docker:
      - image: python:3.7.4
    working_directory: /tmp/src/pynets
    environment:
      - FSLOUTPUTTYPE: 'NIFTI'
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?docs\]' )" != "" ]]; then
              echo "Skipping doc building job"
              circleci step halt
            fi
      - run:
          name: Check Python version and upgrade pip
          command: |
            python --version
            python -m pip install -U pip
      - run:
          name: Install graphviz
          command: |
              apt-get update
              apt-get install -y graphviz
      - run:
          name: Install Requirements (may contain pinned versions)
          command: python -m pip install -r requirements.txt
      - run:
          name: Install pynets
          command: python setup.py install
      - run:
          name: Build documentation
          command: make SPHINXOPTS="-W" -C docs html
      - store_artifacts:
          path: /tmp/src/pynets/docs/_build/html

  get_data:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: /home/circleci/data
    steps:
      - restore_cache:
          keys:
            - data-v0-{{ .Revision }}
            - data-v0-
      - run:
          name: Download OSF test data
          command: |
            wget --retry-connrefused --waitretry=5 --read-timeout=60 --timeout=60 -t 0 -q -O examples.tar.gz "https://osf.io/ye4vf/download" && tar -xvzf examples.tar.gz -C /home/circleci/data
      - save_cache:
         key: data-v0-{{ .Revision }}-{{ epoch }}
         paths:
            - /tmp/data

  unit_tests:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: /tmp/src/pynets
    environment:
      - FSLDIR: /usr/share/fsl/5.0
      - FSLOUTPUTTYPE: 'NIFTI'
    resource_class: medium
    steps:
      - checkout
      - run:
          name: "Switch to Python v3.6"
          command: |
            sudo add-apt-repository ppa:deadsnakes/ppa
            sudo apt-get update
            sudo apt-get install -y make build-essential curl software-properties-common
            sudo apt-get update
            sudo apt-get install python3.6-tk tk-dev
            pyenv install --force 3.6.5
            pyenv global 3.6.5
      - run:
          name: Check Python version and upgrade pip
          command: |
            curl https://bootstrap.pypa.io/get-pip.py | sudo python3.6
            python -m pip install -U pip
      - run:
          name: Install pytest
          command: python -m pip install pytest
      - run:
          name: Install core dependencies
          command: |
            set -e
            sudo apt update && sudo apt upgrade -y
            curl -L https://packagecloud.io/circleci/trusty/gpgkey | sudo apt-key add -
            curl -L https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends apt-transport-https ca-certificates gnupg-agent graphviz sqlite3 libsqlite3-dev dc libquadmath0 zip unzip libglu1 zlib1g-dev libssl-dev libbz2-dev libreadline-dev wget llvm libncurses5-dev libncursesw5-dev xz-utils libffi-dev liblzma-dev libfreetype6-dev pkg-config libgsl0-dev g++ git libgomp1 libpng-dev libgl1-mesa-glx libxtst6 libgtk2.0-bin libxft2 lib32ncurses5 libxmu-dev bzip2 gsl-bin libglu1-mesa-dev libglib2.0-0 libglw1-mesa
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get install openssh-client openssl openssh-server
            sudo apt-get install -y git-lfs
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            ssh git@github.com git-lfs-authenticate "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" download
            git lfs pull
      - run:
          name: Install Requirements (may contain pinned versions)
          command: python -m pip install -r requirements.txt
      - run:
          name: Install pynets
          command: |
            python setup.py install
            python -m pip install git+https://github.com/dPys/nilearn.git
            python -c "from matplotlib import font_manager"
            sed -i 's/\(backend *: \).*$/\1Agg/g' $( python -c "import matplotlib; print(matplotlib.matplotlib_fname())" )
            mkdir -p ~/.nipype
            echo "[monitoring]" > ~/.nipype/nipype.cfg
            echo "enabled = true" >> ~/.nipype/nipype.cfg
      - run:
          name: Install FSL
          command: |
            #sudo sh -c 'echo `curl -sSL "http://neuro.debian.net/lists/stretch.us-ca.full"` >> /etc/apt/sources.list.d/neurodebian.sources.list'
            #sudo apt-key add docker/files/neurodebian.gpg && (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true)
            wget -O- http://neuro.debian.net/lists/bionic.cn-hf.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
            sudo apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9
            sudo apt-get update -qq
            sudo apt-get install -y fsl-5.0-complete
            sudo apt-get upgrade
      - run:
          name: Update PATH and Define Environment Variable at Runtime
          command: |
             echo '# Path to FSL' >> $BASH_ENV
             echo 'FSLDIR=/usr/share/fsl/5.0' >> $BASH_ENV
             echo '. ${FSLDIR}/etc/fslconf/fsl.sh' >> $BASH_ENV
             echo 'PATH=${FSLDIR}/bin:${PATH}' >> $BASH_ENV
             echo 'export FSLDIR PATH' >> $BASH_ENV
             source $BASH_ENV
      - run:
          name: Fetch example data
          command: |
            wget --retry-connrefused --waitretry=5 --read-timeout=60 --timeout=60 -t 0 -q -O examples.tar.gz "https://osf.io/ye4vf/download" && tar -xvzf examples.tar.gz -C tests
      - run:
          name: Examples
          no_output_timeout: 720m
          command: |
            export PYTHONUNBUFFERED=1
            python -m pytest -s -q tests/test_thresholding.py
            python -m pytest -s -q tests/test_utils.py
            python -m pytest -s -q tests/test_netstats.py
            python -m pytest -s -q tests/test_nodemaker.py
            python -m pytest -s -q tests/test_plotting.py
            python -m pytest -s -q tests/test_refs.py
            python -m pytest -s -q tests/test_clustering.py
            python -m pytest -s -q tests/test_dmri_utils.py
            python -m pytest -s -q tests/test_track.py
            python -m pytest -s -q tests/test_estimation.py
            python -m pytest -s -q tests/test_reg_utils.py
            python -m pytest -s -q tests/test_workflows.py
      - store_test_results:
          path: test-results

  deploy_docker_patches:
    machine:
      image: circleci/classic:201808-01
    working_directory: /tmp/src/pynets
    steps:

      - restore_cache:
          keys:
            - docker-v0-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag dpys/pynets dpys/pynets:${CIRCLE_BRANCH#docker/}
              docker push dpys/pynets:${CIRCLE_BRANCH#docker/}
            fi

  deploy_docker:
    machine:
      image: circleci/classic:201808-01
    working_directory: /tmp/src/pynets
    steps:
      - checkout:
          path: /home/circleci/src/pynets
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/pynets
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - docker-v0-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag dpys/pynets dpys/pynets:unstable
              docker push dpys/pynets:unstable
              if [[ -n "$CIRCLE_TAG" ]]; then
                docker push dpys/pynets:latest
                docker tag dpys/pynets dpys/pynets:$CIRCLE_TAG
                docker push dpys/pynets:$CIRCLE_TAG
              fi
            fi

  test_deploy_pypi:
    machine:
      image: circleci/classic:201808-01
    working_directory: /tmp/src/pynets
    steps:
      - checkout
      - run:
          name: Build pynets
          command: |
            pyenv local 3.6.5
            pip install twine  # For use in checking distributions
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            virtualenv --python=python build
            source build/bin/activate
            pip install --upgrade "pip>=19.1" numpy
            echo "${CIRCLE_TAG:-$THISVERSION}" > pynets/VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - store_artifacts:
          path: /tmp/src/pynets/dist
      - run:
          name: Check sdist distribution
          command: |
            pyenv local 3.6.5
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            twine check dist/pynets*.tar.gz
            virtualenv --python=python sdist
            source sdist/bin/activate
            pip install --upgrade "pip>=19.1" numpy
            pip install dist/pynets*.tar.gz
            which pynets | grep sdist\\/bin
            INSTALLED_VERSION=$(pynets --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"PyNets v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - run:
          name: Check wheel distribution
          command: |
            pyenv local 3.6.5
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            twine check dist/pynets*.whl
            virtualenv --python=python wheel
            source wheel/bin/activate
            pip install dist/pynets*.whl
            which pynets | grep wheel\\/bin
            INSTALLED_VERSION=$(pynets --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"PyNets v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - store_artifacts:
          path: /tmp/src/pynets/dist

  deploy_pypi:
    machine:
      image: circleci/classic:201808-01
    working_directory: /tmp/src/pynets
    steps:
      - checkout
      - run:
          name: Build pynets
          command: |
            sudo setfacl -d -m group:$(id -gn):rwx /tmp/src/pynets
            sudo setfacl -m group:$(id -gn):rwx /tmp/src/pynets
            pyenv local 3.6.5
            THISVERSION=$( python get_version.py )
            echo "${CIRCLE_TAG:-$THISVERSION}" > pynets/VERSION
            docker run --rm=false --entrypoint=/bin/bash -v `pwd`:/io -w /io python:3.6.9 -c "pip install numpy && python setup.py sdist"
            docker run --rm=false -e PLAT='manylinux1_x86_64' -e PKGNAME='pynets' -v `pwd`:/io \
                quay.io/pypa/manylinux1_x86_64 /io/.circleci/pypi_wheel/build-wheels.sh
      - run:
          name: Upload packages to PyPI
          command: |
            pyenv local 3.6.5
            pip install twine
            twine upload dist/pynets*

  deployable:
    docker:
      - image: busybox:latest
    steps:
      - run: echo Deploying!

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/
      - unit_tests:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/
      - test_deploy_pypi:
          filters:
            branches:
              ignore:
                - /docs\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      - deploy_docker_patches:
          requires:
            - build
          filters:
            branches:
              only: /docker\/.*/

      - deployable:
          requires:
            - build
            - test_deploy_pypi
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_docker:
          requires:
            - deployable
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_pypi:
          requires:
            - deployable
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
